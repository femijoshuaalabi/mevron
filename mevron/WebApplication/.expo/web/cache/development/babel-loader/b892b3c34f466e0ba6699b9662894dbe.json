{"ast":null,"code":"import { useEffect, useRef } from \"react\";\nexport function useDidUpdateEffect(fn, inputs) {\n  var didMountRef = useRef(false);\n  useEffect(function () {\n    if (didMountRef.current) fn();else didMountRef.current = true;\n  }, inputs);\n}","map":{"version":3,"sources":["C:/GavelProjects/JusticeClock/JusticeClock/WebApplication/_CrossBasement/CrossCore/components/Selects/hooks/use-did-update-effect.tsx"],"names":["useEffect","useRef","useDidUpdateEffect","fn","inputs","didMountRef","current"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AAOA,OAAO,SAASC,kBAAT,CAA4BC,EAA5B,EAAgCC,MAAhC,EAAwC;AAC7C,MAAMC,WAAW,GAAGJ,MAAM,CAAC,KAAD,CAA1B;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIK,WAAW,CAACC,OAAhB,EAAyBH,EAAE,GAA3B,KACKE,WAAW,CAACC,OAAZ,GAAsB,IAAtB;AACN,GAHQ,EAGNF,MAHM,CAAT;AAID","sourcesContent":["import { useEffect, useRef } from \"react\";\n\n/**\n * similar to `useEffect` but gets triggered only when value changes\n * @param fn executable function on dependency updates\n * @param inputs dependency array\n */\nexport function useDidUpdateEffect(fn, inputs) {\n  const didMountRef = useRef(false);\n\n  useEffect(() => {\n    if (didMountRef.current) fn();\n    else didMountRef.current = true;\n  }, inputs);\n}\n"]},"metadata":{},"sourceType":"module"}