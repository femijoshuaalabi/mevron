{
    "ast": null,
    "code": "import _extends from \"@babel/runtime/helpers/extends\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _jsxFileName = \"C:\\\\GavelProjects\\\\mevron\\\\mevron\\\\WebApplication\\\\_CrossBasement\\\\CrossCore\\\\components\\\\Select\\\\index.js\",\n    _templateObject,\n    _templateObject2;\n\nvar _excluded = [\"labelStyle\", \"containerStyle\", \"inputFilterContainerStyle\", \"inputFilterStyle\", \"optionsLabelStyle\", \"optionContainerStyle\", \"multiOptionContainerStyle\", \"multiOptionsLabelStyle\", \"multiListEmptyLabelStyle\", \"listEmptyLabelStyle\", \"selectedItemStyle\", \"listEmptyText\"];\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, memo, useMemo } from 'react';\nimport { isEmpty, find } from 'lodash';\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport styled from 'rn-css';\nimport Colors from \"./constants/Colors\";\nimport Icon from \"./components/Icon\";\nimport Toggle from \"./components/Toggle\";\nvar hitSlop = {\n  top: 14,\n  bottom: 14,\n  left: 14,\n  right: 14\n};\nvar kOptionsHeight = {\n  width: '100%',\n  maxHeight: 180\n};\nvar kOptionListViewStyle = {\n  width: '100%',\n  alignItems: 'center',\n  paddingVertical: 4\n};\nvar renderItemStyle = {\n  flexShrink: 1\n};\n\nfunction SelectBox(_ref) {\n  var labelStyle = _ref.labelStyle,\n      containerStyle = _ref.containerStyle,\n      inputFilterContainerStyle = _ref.inputFilterContainerStyle,\n      inputFilterStyle = _ref.inputFilterStyle,\n      optionsLabelStyle = _ref.optionsLabelStyle,\n      optionContainerStyle = _ref.optionContainerStyle,\n      multiOptionContainerStyle = _ref.multiOptionContainerStyle,\n      multiOptionsLabelStyle = _ref.multiOptionsLabelStyle,\n      multiListEmptyLabelStyle = _ref.multiListEmptyLabelStyle,\n      listEmptyLabelStyle = _ref.listEmptyLabelStyle,\n      selectedItemStyle = _ref.selectedItemStyle,\n      _ref$listEmptyText = _ref.listEmptyText,\n      listEmptyText = _ref$listEmptyText === void 0 ? 'No results found' : _ref$listEmptyText,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState(''),\n      inputValue = _useState[0],\n      setInputValue = _useState[1];\n\n  var _useState2 = useState(false),\n      showOptions = _useState2[0],\n      setShowOptions = _useState2[1];\n\n  function renderLabel(item) {\n    var kOptionsLabelStyle = _objectSpread({\n      fontSize: 17,\n      color: 'rgba(60, 60, 67, 0.6)'\n    }, optionsLabelStyle);\n\n    return __jsx(Text, {\n      style: kOptionsLabelStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 16\n      }\n    }, item);\n  }\n\n  function renderItem(_ref2) {\n    var item = _ref2.item;\n    var isMulti = props.isMulti,\n        onChange = props.onChange,\n        onMultiSelect = props.onMultiSelect,\n        selectedValues = props.selectedValues;\n\n    var kOptionContainerStyle = _objectSpread({\n      borderColor: '#dadada',\n      borderBottomWidth: 1,\n      width: '100%',\n      flexDirection: 'row',\n      alignItems: 'center',\n      background: '#fff',\n      paddingVertical: 12,\n      paddingRight: 10,\n      justifyContent: 'space-between'\n    }, optionContainerStyle);\n\n    return __jsx(View, {\n      style: kOptionContainerStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, isMulti ? __jsx(React.Fragment, null, __jsx(TouchableOpacity, {\n      hitSlop: hitSlop,\n      style: renderItemStyle,\n      onPress: onPressMultiItem(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 25\n      }\n    }, renderLabel(item.item)), __jsx(Toggle, {\n      iconColor: toggleIconColor,\n      checked: selectedValues.some(function (i) {\n        return item.id === i.id;\n      }),\n      onTouch: onPressMultiItem(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }\n    })) : __jsx(React.Fragment, null, __jsx(TouchableOpacity, {\n      hitSlop: hitSlop,\n      style: renderItemStyle,\n      onPress: onPressItem(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }\n    }, renderLabel(item.item), __jsx(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 29\n      }\n    }))));\n\n    function onPressMultiItem() {\n      return function (e) {\n        return onMultiSelect ? onMultiSelect(item) : null;\n      };\n    }\n\n    function onPressItem() {\n      return function (e) {\n        setShowOptions(false);\n        return onChange ? onChange(item) : null;\n      };\n    }\n  }\n\n  function renderGroupItem(_ref3) {\n    var item = _ref3.item;\n    var onTapClose = props.onTapClose,\n        options = props.options;\n    var label = find(options, function (o) {\n      return o.id === item.id;\n    });\n\n    var kMultiOptionContainerStyle = _objectSpread({\n      flexDirection: 'row',\n      borderRadius: 20,\n      paddingVertical: 5,\n      paddingRight: 5,\n      paddingLeft: 10,\n      marginRight: 4,\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: Colors.primary,\n      flexGrow: 1\n    }, multiOptionContainerStyle);\n\n    var kMultiOptionsLabelStyle = _objectSpread({\n      fontSize: 10,\n      color: '#fff'\n    }, multiOptionsLabelStyle);\n\n    return __jsx(View, {\n      style: kMultiOptionContainerStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }\n    }, __jsx(Text, {\n      style: kMultiOptionsLabelStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }\n    }, label.item), __jsx(TouchableOpacity, {\n      style: {\n        marginLeft: 15\n      },\n      hitSlop: hitSlop,\n      onPress: onPressItem(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    }, __jsx(Icon, {\n      name: \"closeCircle\",\n      fill: \"#fff\",\n      width: 21,\n      height: 21,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }\n    })));\n\n    function onPressItem() {\n      return function (e) {\n        return onTapClose ? onTapClose(item) : null;\n      };\n    }\n  }\n\n  var selectIcon = props.selectIcon,\n      label = props.label,\n      _props$inputPlacehold = props.inputPlaceholder,\n      inputPlaceholder = _props$inputPlacehold === void 0 ? 'Select' : _props$inputPlacehold,\n      hideInputFilter = props.hideInputFilter,\n      _props$width = props.width,\n      width = _props$width === void 0 ? '100%' : _props$width,\n      isMulti = props.isMulti,\n      options = props.options,\n      value = props.value,\n      selectedValues = props.selectedValues,\n      _props$arrowIconColor = props.arrowIconColor,\n      arrowIconColor = _props$arrowIconColor === void 0 ? Colors.primary : _props$arrowIconColor,\n      _props$searchIconColo = props.searchIconColor,\n      searchIconColor = _props$searchIconColo === void 0 ? Colors.primary : _props$searchIconColo,\n      _props$toggleIconColo = props.toggleIconColor,\n      toggleIconColor = _props$toggleIconColo === void 0 ? Colors.primary : _props$toggleIconColo,\n      searchInputProps = props.searchInputProps,\n      multiSelectInputFieldProps = props.multiSelectInputFieldProps,\n      _props$listOptionProp = props.listOptionProps,\n      listOptionProps = _props$listOptionProp === void 0 ? {} : _props$listOptionProp;\n  var filteredSuggestions = useMemo(function () {\n    return options.filter(function (suggestion) {\n      return suggestion.item.toLowerCase().indexOf(inputValue.toLowerCase()) > -1;\n    });\n  }, [inputValue, options]);\n\n  function multiListEmptyComponent() {\n    return __jsx(SelectButton, {\n      onPress: onPressShowOptions(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }\n    }, __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }\n    }, \"Select Report Category\"));\n  }\n\n  function optionListEmpty() {\n    var kListEmptyLabelStyle = _objectSpread({\n      fontSize: 17,\n      color: 'rgba(60, 60, 67, 0.6)'\n    }, listEmptyLabelStyle);\n\n    return __jsx(View, {\n      style: kOptionListViewStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }\n    }, __jsx(Text, {\n      style: kListEmptyLabelStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }\n    }, listEmptyText));\n  }\n\n  var SelectContainer = styled.View(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n        flex-direction: row;\\n        width: 100%;\\n        border: 1px solid #ddd;\\n        padding: 10px;\\n        background-color: #fff;\\n    \"])));\n  var SelectButton = styled(Pressable)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n        width: 100%;\\n        height: 100%;\\n    \"])));\n  return __jsx(React.Fragment, null, __jsx(View, {\n    style: {\n      width: width\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }, __jsx(SelectContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }\n  }, isMulti ? __jsx(FlatList, _extends({\n    data: selectedValues,\n    extraData: {\n      inputValue: inputValue,\n      showOptions: showOptions\n    },\n    keyExtractor: keyExtractor(),\n    renderItem: renderGroupItem,\n    horizontal: true,\n    ListEmptyComponent: multiListEmptyComponent\n  }, multiSelectInputFieldProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 25\n    }\n  })) : __jsx(SelectButton, {\n    onPress: onPressShowOptions(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 29\n    }\n  }, \"Select Report Category\")), __jsx(TouchableOpacity, {\n    onPress: onPressShowOptions(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 21\n    }\n  }, selectIcon ? selectIcon : __jsx(Icon, {\n    name: showOptions ? 'upArrow' : 'downArrow',\n    fill: arrowIconColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 29\n    }\n  }))), showOptions && __jsx(FlatList, _extends({\n    data: filteredSuggestions || options,\n    extraData: options,\n    keyExtractor: keyExtractor(),\n    renderItem: renderItem,\n    numColumns: 1,\n    horizontal: false,\n    initialNumToRender: 5,\n    maxToRenderPerBatch: 20,\n    windowSize: 10,\n    ListEmptyComponent: optionListEmpty,\n    style: [kOptionsHeight, listOptionProps.style],\n    ListHeaderComponent: HeaderComponent()\n  }, listOptionProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 21\n    }\n  }))));\n\n  function keyExtractor() {\n    return function (o) {\n      return \"\".concat(o.id, \"-\").concat(Math.random());\n    };\n  }\n\n  function HeaderComponent() {\n    var kInputFilterContainerStyle = _objectSpread({\n      width: '100%',\n      borderBottomWidth: 1,\n      borderBottomColor: '#ddd',\n      flexDirection: 'row',\n      alignItems: 'center',\n      paddingRight: 18,\n      justifyContent: 'space-between'\n    }, inputFilterContainerStyle);\n\n    var kInputFilterStyle = _objectSpread({\n      paddingVertical: 14,\n      paddingRight: 8,\n      color: '#000',\n      fontSize: 12,\n      flexGrow: 1\n    }, inputFilterStyle);\n\n    return __jsx(React.Fragment, null, !hideInputFilter && __jsx(View, {\n      style: kInputFilterContainerStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 21\n      }\n    }, __jsx(TextInput, _extends({\n      value: inputValue,\n      placeholder: inputPlaceholder,\n      onChangeText: onChangeText(),\n      style: kInputFilterStyle,\n      placeholderTextColor: \"#000\"\n    }, searchInputProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 25\n      }\n    })), __jsx(Icon, {\n      name: \"searchBoxIcon\",\n      fill: searchIconColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 25\n      }\n    })), __jsx(ScrollView, {\n      keyboardShouldPersistTaps: \"always\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }\n    }));\n\n    function onChangeText() {\n      return function (value) {\n        return setInputValue(value);\n      };\n    }\n  }\n\n  function onPressShowOptions() {\n    return function () {\n      return setShowOptions(!showOptions);\n    };\n  }\n}\n\nexport default memo(SelectBox);",
    "map": {
        "version": 3,
        "sources": [
            "C:/GavelProjects/mevron/mevron/WebApplication/_CrossBasement/CrossCore/components/Select/index.js"
        ],
        "names": [
            "React",
            "useState",
            "memo",
            "useMemo",
            "isEmpty",
            "find",
            "styled",
            "Colors",
            "Icon",
            "Toggle",
            "hitSlop",
            "top",
            "bottom",
            "left",
            "right",
            "kOptionsHeight",
            "width",
            "maxHeight",
            "kOptionListViewStyle",
            "alignItems",
            "paddingVertical",
            "renderItemStyle",
            "flexShrink",
            "SelectBox",
            "labelStyle",
            "containerStyle",
            "inputFilterContainerStyle",
            "inputFilterStyle",
            "optionsLabelStyle",
            "optionContainerStyle",
            "multiOptionContainerStyle",
            "multiOptionsLabelStyle",
            "multiListEmptyLabelStyle",
            "listEmptyLabelStyle",
            "selectedItemStyle",
            "listEmptyText",
            "props",
            "inputValue",
            "setInputValue",
            "showOptions",
            "setShowOptions",
            "renderLabel",
            "item",
            "kOptionsLabelStyle",
            "fontSize",
            "color",
            "renderItem",
            "isMulti",
            "onChange",
            "onMultiSelect",
            "selectedValues",
            "kOptionContainerStyle",
            "borderColor",
            "borderBottomWidth",
            "flexDirection",
            "background",
            "paddingRight",
            "justifyContent",
            "onPressMultiItem",
            "toggleIconColor",
            "some",
            "i",
            "id",
            "onPressItem",
            "e",
            "renderGroupItem",
            "onTapClose",
            "options",
            "label",
            "o",
            "kMultiOptionContainerStyle",
            "borderRadius",
            "paddingLeft",
            "marginRight",
            "backgroundColor",
            "primary",
            "flexGrow",
            "kMultiOptionsLabelStyle",
            "marginLeft",
            "selectIcon",
            "inputPlaceholder",
            "hideInputFilter",
            "value",
            "arrowIconColor",
            "searchIconColor",
            "searchInputProps",
            "multiSelectInputFieldProps",
            "listOptionProps",
            "filteredSuggestions",
            "filter",
            "suggestion",
            "toLowerCase",
            "indexOf",
            "multiListEmptyComponent",
            "onPressShowOptions",
            "optionListEmpty",
            "kListEmptyLabelStyle",
            "SelectContainer",
            "View",
            "SelectButton",
            "Pressable",
            "keyExtractor",
            "style",
            "HeaderComponent",
            "Math",
            "random",
            "kInputFilterContainerStyle",
            "borderBottomColor",
            "kInputFilterStyle",
            "onChangeText"
        ],
        "mappings": "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",
        "sourcesContent": [
            "import React, { useState, memo, useMemo } from 'react';\r\nimport { isEmpty, find } from 'lodash';\r\nimport { View, FlatList, Text, TouchableOpacity, TextInput, ScrollView, Pressable } from 'react-native';\r\nimport styled from 'rn-css';\r\nimport Colors from './constants/Colors';\r\nimport Icon from './components/Icon';\r\nimport Toggle from './components/Toggle';\r\n\r\nconst hitSlop = { top: 14, bottom: 14, left: 14, right: 14 };\r\n\r\nconst kOptionsHeight = { width: '100%', maxHeight: 180 };\r\n\r\nconst kOptionListViewStyle = {\r\n    width: '100%',\r\n    alignItems: 'center',\r\n    paddingVertical: 4,\r\n};\r\nconst renderItemStyle = { flexShrink: 1 };\r\nfunction SelectBox({\r\n    labelStyle,\r\n    containerStyle,\r\n    inputFilterContainerStyle,\r\n    inputFilterStyle,\r\n    optionsLabelStyle,\r\n    optionContainerStyle,\r\n    multiOptionContainerStyle,\r\n    multiOptionsLabelStyle,\r\n    multiListEmptyLabelStyle,\r\n    listEmptyLabelStyle,\r\n    selectedItemStyle,\r\n    listEmptyText = 'No results found',\r\n    ...props\r\n}) {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const [showOptions, setShowOptions] = useState(false);\r\n\r\n    function renderLabel(item) {\r\n        const kOptionsLabelStyle = {\r\n            fontSize: 17,\r\n            color: 'rgba(60, 60, 67, 0.6)',\r\n            ...optionsLabelStyle,\r\n        };\r\n        return <Text style={kOptionsLabelStyle}>{item}</Text>;\r\n    }\r\n\r\n    function renderItem({ item }) {\r\n        const { isMulti, onChange, onMultiSelect, selectedValues } = props;\r\n        const kOptionContainerStyle = {\r\n            borderColor: '#dadada',\r\n            borderBottomWidth: 1,\r\n            width: '100%',\r\n            flexDirection: 'row',\r\n            alignItems: 'center',\r\n            background: '#fff',\r\n            paddingVertical: 12,\r\n            paddingRight: 10,\r\n            justifyContent: 'space-between',\r\n            ...optionContainerStyle,\r\n        };\r\n        return (\r\n            <View style={kOptionContainerStyle}>\r\n                {isMulti ? (\r\n                    <>\r\n                        <TouchableOpacity hitSlop={hitSlop} style={renderItemStyle} onPress={onPressMultiItem()}>\r\n                            {renderLabel(item.item)}\r\n                        </TouchableOpacity>\r\n                        <Toggle\r\n                            iconColor={toggleIconColor}\r\n                            checked={selectedValues.some((i) => item.id === i.id)}\r\n                            onTouch={onPressMultiItem()}\r\n                        />\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <TouchableOpacity hitSlop={hitSlop} style={renderItemStyle} onPress={onPressItem()}>\r\n                            {renderLabel(item.item)}\r\n                            <View />\r\n                        </TouchableOpacity>\r\n                    </>\r\n                )}\r\n            </View>\r\n        );\r\n\r\n        function onPressMultiItem() {\r\n            return (e) => (onMultiSelect ? onMultiSelect(item) : null);\r\n        }\r\n\r\n        function onPressItem() {\r\n            return (e) => {\r\n                setShowOptions(false);\r\n                return onChange ? onChange(item) : null;\r\n            };\r\n        }\r\n    }\r\n\r\n    function renderGroupItem({ item }) {\r\n        const { onTapClose, options } = props;\r\n        const label = find(options, (o) => o.id === item.id);\r\n        const kMultiOptionContainerStyle = {\r\n            flexDirection: 'row',\r\n            borderRadius: 20,\r\n            paddingVertical: 5,\r\n            paddingRight: 5,\r\n            paddingLeft: 10,\r\n            marginRight: 4,\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            backgroundColor: Colors.primary,\r\n            flexGrow: 1,\r\n            ...multiOptionContainerStyle,\r\n        };\r\n        const kMultiOptionsLabelStyle = {\r\n            fontSize: 10,\r\n            color: '#fff',\r\n            ...multiOptionsLabelStyle,\r\n        };\r\n        return (\r\n            <View style={kMultiOptionContainerStyle}>\r\n                <Text style={kMultiOptionsLabelStyle}>{label.item}</Text>\r\n                <TouchableOpacity style={{ marginLeft: 15 }} hitSlop={hitSlop} onPress={onPressItem()}>\r\n                    <Icon name=\"closeCircle\" fill=\"#fff\" width={21} height={21} />\r\n                </TouchableOpacity>\r\n            </View>\r\n        );\r\n\r\n        function onPressItem() {\r\n            return (e) => (onTapClose ? onTapClose(item) : null);\r\n        }\r\n    }\r\n    const {\r\n        selectIcon,\r\n        label,\r\n        inputPlaceholder = 'Select',\r\n        hideInputFilter,\r\n        width = '100%',\r\n        isMulti,\r\n        options,\r\n        value,\r\n        selectedValues,\r\n        arrowIconColor = Colors.primary,\r\n        searchIconColor = Colors.primary,\r\n        toggleIconColor = Colors.primary,\r\n        searchInputProps,\r\n        multiSelectInputFieldProps,\r\n        listOptionProps = {},\r\n    } = props;\r\n    const filteredSuggestions = useMemo(\r\n        () => options.filter((suggestion) => suggestion.item.toLowerCase().indexOf(inputValue.toLowerCase()) > -1),\r\n        [inputValue, options],\r\n    );\r\n\r\n    function multiListEmptyComponent() {\r\n        return (\r\n            <SelectButton onPress={onPressShowOptions()}>\r\n                <Text>Select Report Category</Text>\r\n            </SelectButton>\r\n        );\r\n    }\r\n\r\n    function optionListEmpty() {\r\n        const kListEmptyLabelStyle = {\r\n            fontSize: 17,\r\n            color: 'rgba(60, 60, 67, 0.6)',\r\n            ...listEmptyLabelStyle,\r\n        };\r\n        return (\r\n            <View style={kOptionListViewStyle}>\r\n                <Text style={kListEmptyLabelStyle}>{listEmptyText}</Text>\r\n            </View>\r\n        );\r\n    }\r\n\r\n    const SelectContainer = styled.View`\r\n        flex-direction: row;\r\n        width: 100%;\r\n        border: 1px solid #ddd;\r\n        padding: 10px;\r\n        background-color: #fff;\r\n    `;\r\n    const SelectButton = styled(Pressable)`\r\n        width: 100%;\r\n        height: 100%;\r\n    `;\r\n\r\n    return (\r\n        <>\r\n            <View\r\n                style={{\r\n                    width,\r\n                }}\r\n            >\r\n                <SelectContainer>\r\n                    {isMulti ? (\r\n                        <FlatList\r\n                            data={selectedValues}\r\n                            extraData={{ inputValue, showOptions }}\r\n                            keyExtractor={keyExtractor()}\r\n                            renderItem={renderGroupItem}\r\n                            horizontal\r\n                            ListEmptyComponent={multiListEmptyComponent}\r\n                            {...multiSelectInputFieldProps}\r\n                        />\r\n                    ) : (\r\n                        <SelectButton onPress={onPressShowOptions()}>\r\n                            <Text>Select Report Category</Text>\r\n                        </SelectButton>\r\n                    )}\r\n                    <TouchableOpacity onPress={onPressShowOptions()}>\r\n                        {selectIcon ? (\r\n                            selectIcon\r\n                        ) : (\r\n                            <Icon name={showOptions ? 'upArrow' : 'downArrow'} fill={arrowIconColor} />\r\n                        )}\r\n                    </TouchableOpacity>\r\n                </SelectContainer>\r\n                {/* Options wrapper */}\r\n                {showOptions && (\r\n                    <FlatList\r\n                        data={filteredSuggestions || options}\r\n                        extraData={options}\r\n                        keyExtractor={keyExtractor()}\r\n                        renderItem={renderItem}\r\n                        numColumns={1}\r\n                        horizontal={false}\r\n                        initialNumToRender={5}\r\n                        maxToRenderPerBatch={20}\r\n                        windowSize={10}\r\n                        ListEmptyComponent={optionListEmpty}\r\n                        style={[kOptionsHeight, listOptionProps.style]}\r\n                        ListHeaderComponent={HeaderComponent()}\r\n                        {...listOptionProps}\r\n                    />\r\n                )}\r\n            </View>\r\n        </>\r\n    );\r\n\r\n    function keyExtractor() {\r\n        return (o) => `${o.id}-${Math.random()}`;\r\n    }\r\n\r\n    function HeaderComponent() {\r\n        const kInputFilterContainerStyle = {\r\n            width: '100%',\r\n            borderBottomWidth: 1,\r\n            borderBottomColor: '#ddd',\r\n            flexDirection: 'row',\r\n            alignItems: 'center',\r\n            paddingRight: 18,\r\n            justifyContent: 'space-between',\r\n            ...inputFilterContainerStyle,\r\n        };\r\n        const kInputFilterStyle = {\r\n            paddingVertical: 14,\r\n            paddingRight: 8,\r\n            color: '#000',\r\n            fontSize: 12,\r\n            flexGrow: 1,\r\n            ...inputFilterStyle,\r\n        };\r\n        return (\r\n            <>\r\n                {!hideInputFilter && (\r\n                    <View style={kInputFilterContainerStyle}>\r\n                        <TextInput\r\n                            value={inputValue}\r\n                            placeholder={inputPlaceholder}\r\n                            onChangeText={onChangeText()}\r\n                            style={kInputFilterStyle}\r\n                            placeholderTextColor=\"#000\"\r\n                            {...searchInputProps}\r\n                        />\r\n                        <Icon name=\"searchBoxIcon\" fill={searchIconColor} />\r\n                    </View>\r\n                )}\r\n                <ScrollView keyboardShouldPersistTaps=\"always\" />\r\n            </>\r\n        );\r\n\r\n        function onChangeText() {\r\n            return (value) => setInputValue(value);\r\n        }\r\n    }\r\n\r\n    function onPressShowOptions() {\r\n        return () => setShowOptions(!showOptions);\r\n    }\r\n}\r\n\r\nexport default memo(SelectBox);\r\n"
        ]
    },
    "metadata": {},
    "sourceType": "module"
}
