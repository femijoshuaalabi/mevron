{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _jsxFileName = \"C:\\\\GavelProjects\\\\JusticeClock\\\\JusticeClock\\\\WebApplication\\\\_CrossBasement\\\\CrossCore\\\\components\\\\Select\\\\index.js\",\n    _templateObject,\n    _templateObject2,\n    _templateObject3,\n    _templateObject4,\n    _templateObject5,\n    _templateObject6,\n    _templateObject7;\n\nvar _excluded = [\"value\", \"labelStyle\", \"containerStyle\", \"inputFilterContainerStyle\", \"inputFilterStyle\", \"optionsLabelStyle\", \"optionContainerStyle\", \"multiOptionContainerStyle\", \"multiOptionsLabelStyle\", \"multiListEmptyLabelStyle\", \"listEmptyLabelStyle\", \"selectedItemStyle\", \"listEmptyText\"];\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, memo, useMemo } from 'react';\nimport { isEmpty, find } from 'lodash';\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport styled from 'rn-css';\nimport Colors from \"./constants/Colors\";\nimport Icon from \"./components/Icon\";\nimport Toggle from \"./components/Toggle\";\nvar hitSlop = {\n  top: 14,\n  bottom: 14,\n  left: 14,\n  right: 14\n};\nvar kOptionListViewStyle = {\n  width: '100%',\n  alignItems: 'center',\n  paddingVertical: 4\n};\nvar renderItemStyle = {\n  flexShrink: 1\n};\n\nfunction SelectBox(_ref) {\n  var value = _ref.value,\n      labelStyle = _ref.labelStyle,\n      containerStyle = _ref.containerStyle,\n      inputFilterContainerStyle = _ref.inputFilterContainerStyle,\n      inputFilterStyle = _ref.inputFilterStyle,\n      optionsLabelStyle = _ref.optionsLabelStyle,\n      optionContainerStyle = _ref.optionContainerStyle,\n      multiOptionContainerStyle = _ref.multiOptionContainerStyle,\n      multiOptionsLabelStyle = _ref.multiOptionsLabelStyle,\n      multiListEmptyLabelStyle = _ref.multiListEmptyLabelStyle,\n      listEmptyLabelStyle = _ref.listEmptyLabelStyle,\n      selectedItemStyle = _ref.selectedItemStyle,\n      _ref$listEmptyText = _ref.listEmptyText,\n      listEmptyText = _ref$listEmptyText === void 0 ? 'No results found' : _ref$listEmptyText,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState(''),\n      inputValue = _useState[0],\n      setInputValue = _useState[1];\n\n  var _useState2 = useState(false),\n      showOptions = _useState2[0],\n      setShowOptions = _useState2[1];\n\n  function renderLabel(item) {\n    var kOptionsLabelStyle = _objectSpread({\n      fontSize: 17,\n      color: 'rgba(60, 60, 67, 0.6)'\n    }, optionsLabelStyle);\n\n    return __jsx(Text, {\n      style: kOptionsLabelStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 16\n      }\n    }, item);\n  }\n\n  function renderItem(_ref2) {\n    var item = _ref2.item;\n    var isMulti = props.isMulti,\n        onChange = props.onChange,\n        onMultiSelect = props.onMultiSelect,\n        selectedValues = props.selectedValues;\n    var SelectOption = styled.View(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n            border-bottom: 1px solid #dadada;\\n            width: 100%;\\n            flex-direction: row;\\n            background-color: #fff;\\n            padding: 10px;\\n        \"])));\n    var Options = styled.TouchableOpacity(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n            width: 100%;\\n        \"])));\n    return __jsx(SelectOption, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, isMulti ? __jsx(React.Fragment, null, __jsx(Options, {\n      hitSlop: hitSlop,\n      style: renderItemStyle,\n      onPress: onPressMultiItem(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 25\n      }\n    }, renderLabel(item.item)), __jsx(Toggle, {\n      iconColor: toggleIconColor,\n      checked: selectedValues.some(function (i) {\n        return item.id === i.id;\n      }),\n      onTouch: onPressMultiItem(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }\n    })) : __jsx(React.Fragment, null, __jsx(Options, {\n      hitSlop: hitSlop,\n      style: renderItemStyle,\n      onPress: onPressItem(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }\n    }, renderLabel(item.item))));\n\n    function onPressMultiItem() {\n      return function (e) {\n        return onMultiSelect ? onMultiSelect(item) : null;\n      };\n    }\n\n    function onPressItem() {\n      return function (e) {\n        setShowOptions(false);\n        return onChange ? onChange(item) : null;\n      };\n    }\n  }\n\n  function renderGroupItem(_ref3) {\n    var item = _ref3.item;\n    var onTapClose = props.onTapClose,\n        options = props.options;\n    var label = find(options, function (o) {\n      return o.id === item.id;\n    });\n\n    var kMultiOptionContainerStyle = _objectSpread({\n      flexDirection: 'row',\n      borderRadius: 20,\n      paddingVertical: 5,\n      paddingRight: 5,\n      paddingLeft: 10,\n      marginRight: 4,\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: Colors.primary,\n      flexGrow: 1\n    }, multiOptionContainerStyle);\n\n    var kMultiOptionsLabelStyle = _objectSpread({\n      fontSize: 10,\n      color: '#fff'\n    }, multiOptionsLabelStyle);\n\n    return __jsx(View, {\n      style: kMultiOptionContainerStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }, __jsx(Text, {\n      style: kMultiOptionsLabelStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }, label.item), __jsx(TouchableOpacity, {\n      style: {\n        marginLeft: 15\n      },\n      hitSlop: hitSlop,\n      onPress: onPressItem(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, __jsx(Icon, {\n      name: \"closeCircle\",\n      fill: \"#fff\",\n      width: 21,\n      height: 21,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }\n    })));\n\n    function onPressItem() {\n      return function (e) {\n        return onTapClose ? onTapClose(item) : null;\n      };\n    }\n  }\n\n  var selectIcon = props.selectIcon,\n      _props$inputPlacehold = props.inputPlaceholder,\n      inputPlaceholder = _props$inputPlacehold === void 0 ? 'Select an Option' : _props$inputPlacehold,\n      hideInputFilter = props.hideInputFilter,\n      _props$width = props.width,\n      width = _props$width === void 0 ? '100%' : _props$width,\n      isMulti = props.isMulti,\n      options = props.options,\n      selectedValues = props.selectedValues,\n      _props$arrowIconColor = props.arrowIconColor,\n      arrowIconColor = _props$arrowIconColor === void 0 ? Colors.primary : _props$arrowIconColor,\n      _props$searchIconColo = props.searchIconColor,\n      searchIconColor = _props$searchIconColo === void 0 ? Colors.primary : _props$searchIconColo,\n      _props$toggleIconColo = props.toggleIconColor,\n      toggleIconColor = _props$toggleIconColo === void 0 ? Colors.primary : _props$toggleIconColo,\n      multiSelectInputFieldProps = props.multiSelectInputFieldProps,\n      _props$listOptionProp = props.listOptionProps,\n      listOptionProps = _props$listOptionProp === void 0 ? {} : _props$listOptionProp;\n  var filteredSuggestions = useMemo(function () {\n    return options.filter(function (suggestion) {\n      return suggestion.item.toLowerCase().indexOf(inputValue.toLowerCase()) > -1;\n    });\n  }, [inputValue, options]);\n\n  function SelectButtonAction() {\n    return __jsx(SelectButton, {\n      onPress: onPressShowOptions(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }, __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    }, \"Select Report Category\"));\n  }\n\n  function optionListEmpty() {\n    var kListEmptyLabelStyle = _objectSpread({\n      fontSize: 17,\n      color: 'rgba(60, 60, 67, 0.6)'\n    }, listEmptyLabelStyle);\n\n    return __jsx(View, {\n      style: kOptionListViewStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }, __jsx(Text, {\n      style: kListEmptyLabelStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }\n    }, listEmptyText));\n  }\n\n  var SelectContainer = styled.View(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n        flex-direction: row;\\n        width: 100%;\\n        padding: 10px;\\n        background-color: #fff;\\n        height: 50px;\\n        align-items: center;\\n        justify-content: center;\\n    \"])));\n  var SelectButton = styled.TouchableOpacity(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n        width: 100%;\\n        height: 100%;\\n    \"])));\n  var OptionsContainer = styled.FlatList(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\\n        width: 100%;\\n        max-height: 300px;\\n    \"])));\n\n  function HeaderComponent() {\n    var SearchBoxContainer = styled.View(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\\n            width: 100%;\\n            border-bottom: 1px solid #ddd;\\n            flex-direction: row;\\n            align-items: center;\\n            padding-right: 18px;\\n            justify-content: space-between;\\n            background-color: #fff;\\n        \"])));\n    var SearchBox = styled.TextInput(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([\"\\n            padding: 10px;\\n            color: #000;\\n            flex-grow: 1;\\n        \"])));\n    return __jsx(React.Fragment, null, isMulti ? __jsx(React.Fragment, null, __jsx(SearchBoxContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 25\n      }\n    }, __jsx(SearchBox, {\n      value: inputValue,\n      placeholder: \"Type to search category\",\n      onChangeText: onChangeText(),\n      placeholderTextColor: \"#000\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 29\n      }\n    }), __jsx(Icon, {\n      name: \"searchBoxIcon\",\n      fill: searchIconColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 29\n      }\n    })), __jsx(ScrollView, {\n      keyboardShouldPersistTaps: \"always\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 25\n      }\n    })) : __jsx(React.Fragment, null));\n\n    function onChangeText() {\n      return function (value) {\n        return setInputValue(value);\n      };\n    }\n  }\n\n  return __jsx(React.Fragment, null, __jsx(View, {\n    style: {\n      width: width\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }\n  }, __jsx(SelectContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 17\n    }\n  }, isMulti ? __jsx(FlatList, _extends({\n    data: selectedValues,\n    extraData: {\n      inputValue: inputValue,\n      showOptions: showOptions\n    },\n    keyExtractor: keyExtractor(),\n    renderItem: renderGroupItem,\n    contentContainerStyle: {\n      flexGrow: 1\n    },\n    horizontal: true,\n    ListEmptyComponent: SelectButtonAction\n  }, multiSelectInputFieldProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 25\n    }\n  })) : __jsx(SelectButton, {\n    onPress: onPressShowOptions(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 29\n    }\n  }, value.item || inputPlaceholder || 'Select Report Category')), __jsx(TouchableOpacity, {\n    onPress: onPressShowOptions(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 21\n    }\n  }, selectIcon ? selectIcon : __jsx(Icon, {\n    name: showOptions ? 'upArrow' : 'downArrow',\n    fill: arrowIconColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 29\n    }\n  }))), showOptions && __jsx(OptionsContainer, _extends({\n    data: filteredSuggestions || options,\n    extraData: options,\n    keyExtractor: keyExtractor(),\n    renderItem: renderItem,\n    numColumns: 1,\n    horizontal: false,\n    initialNumToRender: 5,\n    maxToRenderPerBatch: 20,\n    windowSize: 10,\n    ListEmptyComponent: optionListEmpty,\n    ListHeaderComponent: HeaderComponent()\n  }, listOptionProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 21\n    }\n  }))));\n\n  function keyExtractor() {\n    return function (o) {\n      return \"\".concat(o.id, \"-\").concat(Math.random());\n    };\n  }\n\n  function onPressShowOptions() {\n    return function () {\n      return setShowOptions(!showOptions);\n    };\n  }\n}\n\nexport default memo(SelectBox);","map":{"version":3,"sources":["C:/GavelProjects/JusticeClock/JusticeClock/WebApplication/_CrossBasement/CrossCore/components/Select/index.js"],"names":["React","useState","memo","useMemo","isEmpty","find","styled","Colors","Icon","Toggle","hitSlop","top","bottom","left","right","kOptionListViewStyle","width","alignItems","paddingVertical","renderItemStyle","flexShrink","SelectBox","value","labelStyle","containerStyle","inputFilterContainerStyle","inputFilterStyle","optionsLabelStyle","optionContainerStyle","multiOptionContainerStyle","multiOptionsLabelStyle","multiListEmptyLabelStyle","listEmptyLabelStyle","selectedItemStyle","listEmptyText","props","inputValue","setInputValue","showOptions","setShowOptions","renderLabel","item","kOptionsLabelStyle","fontSize","color","renderItem","isMulti","onChange","onMultiSelect","selectedValues","SelectOption","View","Options","TouchableOpacity","onPressMultiItem","toggleIconColor","some","i","id","onPressItem","e","renderGroupItem","onTapClose","options","label","o","kMultiOptionContainerStyle","flexDirection","borderRadius","paddingRight","paddingLeft","marginRight","justifyContent","backgroundColor","primary","flexGrow","kMultiOptionsLabelStyle","marginLeft","selectIcon","inputPlaceholder","hideInputFilter","arrowIconColor","searchIconColor","multiSelectInputFieldProps","listOptionProps","filteredSuggestions","filter","suggestion","toLowerCase","indexOf","SelectButtonAction","onPressShowOptions","optionListEmpty","kListEmptyLabelStyle","SelectContainer","SelectButton","OptionsContainer","FlatList","HeaderComponent","SearchBoxContainer","SearchBox","TextInput","onChangeText","keyExtractor","Math","random"],"mappings":"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","sourcesContent":["import React, { useState, memo, useMemo } from 'react';\r\nimport { isEmpty, find } from 'lodash';\r\nimport { View, FlatList, Text, TouchableOpacity, TextInput, ScrollView } from 'react-native';\r\nimport styled from 'rn-css';\r\nimport Colors from './constants/Colors';\r\nimport Icon from './components/Icon';\r\nimport Toggle from './components/Toggle';\r\n\r\nconst hitSlop = { top: 14, bottom: 14, left: 14, right: 14 };\r\n\r\nconst kOptionListViewStyle = {\r\n    width: '100%',\r\n    alignItems: 'center',\r\n    paddingVertical: 4,\r\n};\r\nconst renderItemStyle = { flexShrink: 1 };\r\n\r\nfunction SelectBox({\r\n    value,\r\n    labelStyle,\r\n    containerStyle,\r\n    inputFilterContainerStyle,\r\n    inputFilterStyle,\r\n    optionsLabelStyle,\r\n    optionContainerStyle,\r\n    multiOptionContainerStyle,\r\n    multiOptionsLabelStyle,\r\n    multiListEmptyLabelStyle,\r\n    listEmptyLabelStyle,\r\n    selectedItemStyle,\r\n    listEmptyText = 'No results found',\r\n    ...props\r\n}) {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const [showOptions, setShowOptions] = useState(false);\r\n\r\n    function renderLabel(item) {\r\n        const kOptionsLabelStyle = {\r\n            fontSize: 17,\r\n            color: 'rgba(60, 60, 67, 0.6)',\r\n            ...optionsLabelStyle,\r\n        };\r\n        return <Text style={kOptionsLabelStyle}>{item}</Text>;\r\n    }\r\n\r\n    function renderItem({ item }) {\r\n        const { isMulti, onChange, onMultiSelect, selectedValues } = props;\r\n        const SelectOption = styled.View`\r\n            border-bottom: 1px solid #dadada;\r\n            width: 100%;\r\n            flex-direction: row;\r\n            background-color: #fff;\r\n            padding: 10px;\r\n        `;\r\n        const Options = styled.TouchableOpacity`\r\n            width: 100%;\r\n        `;\r\n        return (\r\n            <SelectOption>\r\n                {isMulti ? (\r\n                    <>\r\n                        <Options hitSlop={hitSlop} style={renderItemStyle} onPress={onPressMultiItem()}>\r\n                            {renderLabel(item.item)}\r\n                        </Options>\r\n                        <Toggle\r\n                            iconColor={toggleIconColor}\r\n                            checked={selectedValues.some((i) => item.id === i.id)}\r\n                            onTouch={onPressMultiItem()}\r\n                        />\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Options hitSlop={hitSlop} style={renderItemStyle} onPress={onPressItem()}>\r\n                            {renderLabel(item.item)}\r\n                        </Options>\r\n                    </>\r\n                )}\r\n            </SelectOption>\r\n        );\r\n\r\n        function onPressMultiItem() {\r\n            return (e) => (onMultiSelect ? onMultiSelect(item) : null);\r\n        }\r\n\r\n        function onPressItem() {\r\n            return (e) => {\r\n                setShowOptions(false);\r\n                return onChange ? onChange(item) : null;\r\n            };\r\n        }\r\n    }\r\n\r\n    function renderGroupItem({ item }) {\r\n        const { onTapClose, options } = props;\r\n        const label = find(options, (o) => o.id === item.id);\r\n        const kMultiOptionContainerStyle = {\r\n            flexDirection: 'row',\r\n            borderRadius: 20,\r\n            paddingVertical: 5,\r\n            paddingRight: 5,\r\n            paddingLeft: 10,\r\n            marginRight: 4,\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            backgroundColor: Colors.primary,\r\n            flexGrow: 1,\r\n            ...multiOptionContainerStyle,\r\n        };\r\n        const kMultiOptionsLabelStyle = {\r\n            fontSize: 10,\r\n            color: '#fff',\r\n            ...multiOptionsLabelStyle,\r\n        };\r\n        return (\r\n            <View style={kMultiOptionContainerStyle}>\r\n                <Text style={kMultiOptionsLabelStyle}>{label.item}</Text>\r\n                <TouchableOpacity style={{ marginLeft: 15 }} hitSlop={hitSlop} onPress={onPressItem()}>\r\n                    <Icon name=\"closeCircle\" fill=\"#fff\" width={21} height={21} />\r\n                </TouchableOpacity>\r\n            </View>\r\n        );\r\n\r\n        function onPressItem() {\r\n            return (e) => (onTapClose ? onTapClose(item) : null);\r\n        }\r\n    }\r\n    const {\r\n        selectIcon,\r\n        inputPlaceholder = 'Select an Option',\r\n        hideInputFilter,\r\n        width = '100%',\r\n        isMulti,\r\n        options,\r\n        selectedValues,\r\n        arrowIconColor = Colors.primary,\r\n        searchIconColor = Colors.primary,\r\n        toggleIconColor = Colors.primary,\r\n        multiSelectInputFieldProps,\r\n        listOptionProps = {},\r\n    } = props;\r\n    const filteredSuggestions = useMemo(\r\n        () => options.filter((suggestion) => suggestion.item.toLowerCase().indexOf(inputValue.toLowerCase()) > -1),\r\n        [inputValue, options],\r\n    );\r\n\r\n    function SelectButtonAction() {\r\n        return (\r\n            <SelectButton onPress={onPressShowOptions()}>\r\n                <Text>Select Report Category</Text>\r\n            </SelectButton>\r\n        );\r\n    }\r\n\r\n    function optionListEmpty() {\r\n        const kListEmptyLabelStyle = {\r\n            fontSize: 17,\r\n            color: 'rgba(60, 60, 67, 0.6)',\r\n            ...listEmptyLabelStyle,\r\n        };\r\n        return (\r\n            <View style={kOptionListViewStyle}>\r\n                <Text style={kListEmptyLabelStyle}>{listEmptyText}</Text>\r\n            </View>\r\n        );\r\n    }\r\n\r\n    const SelectContainer = styled.View`\r\n        flex-direction: row;\r\n        width: 100%;\r\n        padding: 10px;\r\n        background-color: #fff;\r\n        height: 50px;\r\n        align-items: center;\r\n        justify-content: center;\r\n    `;\r\n    const SelectButton = styled.TouchableOpacity`\r\n        width: 100%;\r\n        height: 100%;\r\n    `;\r\n\r\n    const OptionsContainer = styled.FlatList`\r\n        width: 100%;\r\n        max-height: 300px;\r\n    `;\r\n\r\n    function HeaderComponent() {\r\n        const SearchBoxContainer = styled.View`\r\n            width: 100%;\r\n            border-bottom: 1px solid #ddd;\r\n            flex-direction: row;\r\n            align-items: center;\r\n            padding-right: 18px;\r\n            justify-content: space-between;\r\n            background-color: #fff;\r\n        `;\r\n\r\n        const SearchBox = styled.TextInput`\r\n            padding: 10px;\r\n            color: #000;\r\n            flex-grow: 1;\r\n        `;\r\n        return (\r\n            <>\r\n                {isMulti ? (\r\n                    <>\r\n                        <SearchBoxContainer>\r\n                            <SearchBox\r\n                                value={inputValue}\r\n                                placeholder=\"Type to search category\"\r\n                                onChangeText={onChangeText()}\r\n                                placeholderTextColor=\"#000\"\r\n                            />\r\n                            <Icon name=\"searchBoxIcon\" fill={searchIconColor} />\r\n                        </SearchBoxContainer>\r\n                        <ScrollView keyboardShouldPersistTaps=\"always\" />\r\n                    </>\r\n                ) : (\r\n                    <></>\r\n                )}\r\n            </>\r\n        );\r\n\r\n        function onChangeText() {\r\n            return (value) => setInputValue(value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <View\r\n                style={{\r\n                    width,\r\n                }}\r\n            >\r\n                <SelectContainer>\r\n                    {isMulti ? (\r\n                        <FlatList\r\n                            data={selectedValues}\r\n                            extraData={{ inputValue, showOptions }}\r\n                            keyExtractor={keyExtractor()}\r\n                            renderItem={renderGroupItem}\r\n                            contentContainerStyle={{ flexGrow: 1 }}\r\n                            horizontal\r\n                            ListEmptyComponent={SelectButtonAction}\r\n                            {...multiSelectInputFieldProps}\r\n                        />\r\n                    ) : (\r\n                        <SelectButton onPress={onPressShowOptions()}>\r\n                            <Text>{value.item || inputPlaceholder || 'Select Report Category'}</Text>\r\n                        </SelectButton>\r\n                    )}\r\n                    <TouchableOpacity onPress={onPressShowOptions()}>\r\n                        {selectIcon ? (\r\n                            selectIcon\r\n                        ) : (\r\n                            <Icon name={showOptions ? 'upArrow' : 'downArrow'} fill={arrowIconColor} />\r\n                        )}\r\n                    </TouchableOpacity>\r\n                </SelectContainer>\r\n                {/* Options wrapper */}\r\n                {showOptions && (\r\n                    <OptionsContainer\r\n                        data={filteredSuggestions || options}\r\n                        extraData={options}\r\n                        keyExtractor={keyExtractor()}\r\n                        renderItem={renderItem}\r\n                        numColumns={1}\r\n                        horizontal={false}\r\n                        initialNumToRender={5}\r\n                        maxToRenderPerBatch={20}\r\n                        windowSize={10}\r\n                        ListEmptyComponent={optionListEmpty}\r\n                        ListHeaderComponent={HeaderComponent()}\r\n                        {...listOptionProps}\r\n                    />\r\n                )}\r\n            </View>\r\n        </>\r\n    );\r\n\r\n    function keyExtractor() {\r\n        return (o) => `${o.id}-${Math.random()}`;\r\n    }\r\n\r\n    function onPressShowOptions() {\r\n        return () => setShowOptions(!showOptions);\r\n    }\r\n}\r\n\r\nexport default memo(SelectBox);\r\n"]},"metadata":{},"sourceType":"module"}