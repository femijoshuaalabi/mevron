{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\GavelProjects\\\\JusticeClock\\\\JusticeClock\\\\WebApplication\\\\_CrossBasement\\\\CrossCore\\\\components\\\\Selects\\\\multi-select\\\\dropdown.tsx\";\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useDidUpdateEffect } from \"../hooks/use-did-update-effect\";\nimport { useKey } from \"../hooks/use-key\";\nimport { useMultiSelect } from \"../hooks/use-multi-select\";\nimport { KEY } from \"../lib/constants\";\nimport SelectPanel from \"../select-panel\";\nimport { Cross } from \"../select-panel/cross\";\nimport { Arrow } from \"./arrow\";\nimport { DropdownHeader } from \"./header\";\nimport { Loading } from \"./loading\";\n\nvar Dropdown = function Dropdown() {\n  var _useMultiSelect = useMultiSelect(),\n      t = _useMultiSelect.t,\n      onMenuToggle = _useMultiSelect.onMenuToggle,\n      ArrowRenderer = _useMultiSelect.ArrowRenderer,\n      shouldToggleOnHover = _useMultiSelect.shouldToggleOnHover,\n      isLoading = _useMultiSelect.isLoading,\n      disabled = _useMultiSelect.disabled,\n      onChange = _useMultiSelect.onChange,\n      labelledBy = _useMultiSelect.labelledBy,\n      value = _useMultiSelect.value,\n      isOpen = _useMultiSelect.isOpen,\n      defaultIsOpen = _useMultiSelect.defaultIsOpen,\n      ClearSelectedIcon = _useMultiSelect.ClearSelectedIcon;\n\n  var _useState = useState(true),\n      isInternalExpand = _useState[0],\n      setIsInternalExpand = _useState[1];\n\n  var _useState2 = useState(defaultIsOpen),\n      expanded = _useState2[0],\n      setExpanded = _useState2[1];\n\n  var _useState3 = useState(false),\n      hasFocus = _useState3[0],\n      setHasFocus = _useState3[1];\n\n  var FinalArrow = ArrowRenderer || Arrow;\n  var wrapper = useRef();\n  useDidUpdateEffect(function () {\n    onMenuToggle && onMenuToggle(expanded);\n  }, [expanded]);\n  useEffect(function () {\n    if (defaultIsOpen === undefined && typeof isOpen === \"boolean\") {\n      setIsInternalExpand(false);\n      setExpanded(isOpen);\n    }\n  }, [isOpen]);\n\n  var handleKeyDown = function handleKeyDown(e) {\n    if ([\"text\", \"button\"].includes(e.target.type) && [KEY.SPACE, KEY.ENTER].includes(e.code)) {\n      return;\n    }\n\n    if (isInternalExpand) {\n      if (e.code === KEY.ESCAPE) {\n        var _wrapper$current;\n\n        setExpanded(false);\n        wrapper === null || wrapper === void 0 ? void 0 : (_wrapper$current = wrapper.current) === null || _wrapper$current === void 0 ? void 0 : _wrapper$current.focus();\n      } else {\n        setExpanded(true);\n      }\n    }\n\n    e.preventDefault();\n  };\n\n  useKey([KEY.ENTER, KEY.ARROW_DOWN, KEY.SPACE, KEY.ESCAPE], handleKeyDown, {\n    target: wrapper\n  });\n\n  var handleHover = function handleHover(iexpanded) {\n    isInternalExpand && shouldToggleOnHover && setExpanded(iexpanded);\n  };\n\n  var handleFocus = function handleFocus() {\n    return !hasFocus && setHasFocus(true);\n  };\n\n  var handleBlur = function handleBlur(e) {\n    if (!e.currentTarget.contains(e.relatedTarget) && isInternalExpand) {\n      setHasFocus(false);\n      setExpanded(false);\n    }\n  };\n\n  var handleMouseEnter = function handleMouseEnter() {\n    return handleHover(true);\n  };\n\n  var handleMouseLeave = function handleMouseLeave() {\n    return handleHover(false);\n  };\n\n  var toggleExpanded = function toggleExpanded() {\n    isInternalExpand && setExpanded(isLoading || disabled ? false : !expanded);\n  };\n\n  var handleClearSelected = function handleClearSelected(e) {\n    e.stopPropagation();\n    onChange([]);\n    isInternalExpand && setExpanded(false);\n  };\n\n  return __jsx(\"div\", {\n    tabIndex: 0,\n    className: \"dropdown-container\",\n    \"aria-labelledby\": labelledBy,\n    \"aria-expanded\": expanded,\n    \"aria-readonly\": true,\n    \"aria-disabled\": disabled,\n    ref: wrapper,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"dropdown-heading\",\n    onClick: toggleExpanded,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"dropdown-heading-value\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, __jsx(DropdownHeader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  })), isLoading && __jsx(Loading, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 23\n    }\n  }), value.length > 0 && __jsx(\"button\", {\n    type: \"button\",\n    className: \"clear-selected-button\",\n    onClick: handleClearSelected,\n    disabled: disabled,\n    \"aria-label\": t(\"clearSelected\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, ClearSelectedIcon || __jsx(Cross, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 35\n    }\n  })), __jsx(FinalArrow, {\n    expanded: expanded,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  })), expanded && __jsx(\"div\", {\n    className: \"dropdown-content\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"panel-content\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, __jsx(SelectPanel, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default Dropdown;","map":{"version":3,"sources":["C:/GavelProjects/JusticeClock/JusticeClock/WebApplication/_CrossBasement/CrossCore/components/Selects/multi-select/dropdown.tsx"],"names":["React","useEffect","useRef","useState","useDidUpdateEffect","useKey","useMultiSelect","KEY","SelectPanel","Cross","Arrow","DropdownHeader","Loading","Dropdown","t","onMenuToggle","ArrowRenderer","shouldToggleOnHover","isLoading","disabled","onChange","labelledBy","value","isOpen","defaultIsOpen","ClearSelectedIcon","isInternalExpand","setIsInternalExpand","expanded","setExpanded","hasFocus","setHasFocus","FinalArrow","wrapper","undefined","handleKeyDown","e","includes","target","type","SPACE","ENTER","code","ESCAPE","current","focus","preventDefault","ARROW_DOWN","handleHover","iexpanded","handleFocus","handleBlur","currentTarget","contains","relatedTarget","handleMouseEnter","handleMouseLeave","toggleExpanded","handleClearSelected","stopPropagation","length"],"mappings":";;;;AAKA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AAEA,SAASC,kBAAT;AACA,SAASC,MAAT;AACA,SAASC,cAAT;AACA,SAASC,GAAT;AACA,OAAOC,WAAP;AACA,SAASC,KAAT;AACA,SAASC,KAAT;AACA,SAASC,cAAT;AACA,SAASC,OAAT;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,wBAaIP,cAAc,EAblB;AAAA,MACEQ,CADF,mBACEA,CADF;AAAA,MAEEC,YAFF,mBAEEA,YAFF;AAAA,MAGEC,aAHF,mBAGEA,aAHF;AAAA,MAIEC,mBAJF,mBAIEA,mBAJF;AAAA,MAKEC,SALF,mBAKEA,SALF;AAAA,MAMEC,QANF,mBAMEA,QANF;AAAA,MAOEC,QAPF,mBAOEA,QAPF;AAAA,MAQEC,UARF,mBAQEA,UARF;AAAA,MASEC,KATF,mBASEA,KATF;AAAA,MAUEC,MAVF,mBAUEA,MAVF;AAAA,MAWEC,aAXF,mBAWEA,aAXF;AAAA,MAYEC,iBAZF,mBAYEA,iBAZF;;AAeA,kBAAgDtB,QAAQ,CAAC,IAAD,CAAxD;AAAA,MAAOuB,gBAAP;AAAA,MAAyBC,mBAAzB;;AACA,mBAAgCxB,QAAQ,CAACqB,aAAD,CAAxC;AAAA,MAAOI,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAAgC1B,QAAQ,CAAC,KAAD,CAAxC;AAAA,MAAO2B,QAAP;AAAA,MAAiBC,WAAjB;;AACA,MAAMC,UAAU,GAAGhB,aAAa,IAAIN,KAApC;AAEA,MAAMuB,OAAY,GAAG/B,MAAM,EAA3B;AAEAE,EAAAA,kBAAkB,CAAC,YAAM;AACvBW,IAAAA,YAAY,IAAIA,YAAY,CAACa,QAAD,CAA5B;AACD,GAFiB,EAEf,CAACA,QAAD,CAFe,CAAlB;AAIA3B,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIuB,aAAa,KAAKU,SAAlB,IAA+B,OAAOX,MAAP,KAAkB,SAArD,EAAgE;AAC9DI,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACAE,MAAAA,WAAW,CAACN,MAAD,CAAX;AACD;AACF,GALQ,EAKN,CAACA,MAAD,CALM,CAAT;;AAOA,MAAMY,aAAa,GAAG,SAAhBA,aAAgB,CAACC,CAAD,EAAO;AAE3B,QACE,CAAC,MAAD,EAAS,QAAT,EAAmBC,QAAnB,CAA4BD,CAAC,CAACE,MAAF,CAASC,IAArC,KACA,CAAChC,GAAG,CAACiC,KAAL,EAAYjC,GAAG,CAACkC,KAAhB,EAAuBJ,QAAvB,CAAgCD,CAAC,CAACM,IAAlC,CAFF,EAGE;AACA;AACD;;AAED,QAAIhB,gBAAJ,EAAsB;AACpB,UAAIU,CAAC,CAACM,IAAF,KAAWnC,GAAG,CAACoC,MAAnB,EAA2B;AAAA;;AACzBd,QAAAA,WAAW,CAAC,KAAD,CAAX;AACAI,QAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,gCAAAA,OAAO,CAAEW,OAAT,sEAAkBC,KAAlB;AACD,OAHD,MAGO;AACLhB,QAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF;;AACDO,IAAAA,CAAC,CAACU,cAAF;AACD,GAlBD;;AAoBAzC,EAAAA,MAAM,CAAC,CAACE,GAAG,CAACkC,KAAL,EAAYlC,GAAG,CAACwC,UAAhB,EAA4BxC,GAAG,CAACiC,KAAhC,EAAuCjC,GAAG,CAACoC,MAA3C,CAAD,EAAqDR,aAArD,EAAoE;AACxEG,IAAAA,MAAM,EAAEL;AADgE,GAApE,CAAN;;AAIA,MAAMe,WAAW,GAAG,SAAdA,WAAc,CAACC,SAAD,EAAwB;AAC1CvB,IAAAA,gBAAgB,IAAIT,mBAApB,IAA2CY,WAAW,CAACoB,SAAD,CAAtD;AACD,GAFD;;AAIA,MAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA,WAAM,CAACpB,QAAD,IAAaC,WAAW,CAAC,IAAD,CAA9B;AAAA,GAApB;;AAEA,MAAMoB,UAAU,GAAG,SAAbA,UAAa,CAACf,CAAD,EAAO;AACxB,QAAI,CAACA,CAAC,CAACgB,aAAF,CAAgBC,QAAhB,CAAyBjB,CAAC,CAACkB,aAA3B,CAAD,IAA8C5B,gBAAlD,EAAoE;AAClEK,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD;AACF,GALD;;AAOA,MAAM0B,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,WAAMP,WAAW,CAAC,IAAD,CAAjB;AAAA,GAAzB;;AAEA,MAAMQ,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,WAAMR,WAAW,CAAC,KAAD,CAAjB;AAAA,GAAzB;;AAEA,MAAMS,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B/B,IAAAA,gBAAgB,IAAIG,WAAW,CAACX,SAAS,IAAIC,QAAb,GAAwB,KAAxB,GAAgC,CAACS,QAAlC,CAA/B;AACD,GAFD;;AAIA,MAAM8B,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACtB,CAAD,EAAO;AACjCA,IAAAA,CAAC,CAACuB,eAAF;AACAvC,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAM,IAAAA,gBAAgB,IAAIG,WAAW,CAAC,KAAD,CAA/B;AACD,GAJD;;AAMA,SACE;AACE,IAAA,QAAQ,EAAE,CADZ;AAEE,IAAA,SAAS,EAAC,oBAFZ;AAGE,uBAAiBR,UAHnB;AAIE,qBAAeO,QAJjB;AAKE,qBAAe,IALjB;AAME,qBAAeT,QANjB;AAOE,IAAA,GAAG,EAAEc,OAPP;AAQE,IAAA,OAAO,EAAEiB,WARX;AASE,IAAA,MAAM,EAAEC,UATV;AAUE,IAAA,YAAY,EAAEI,gBAVhB;AAWE,IAAA,YAAY,EAAEC,gBAXhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAkC,IAAA,OAAO,EAAEC,cAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIGvC,SAAS,IAAI,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJhB,EAKGI,KAAK,CAACsC,MAAN,GAAe,CAAf,IACC;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,SAAS,EAAC,uBAFZ;AAGE,IAAA,OAAO,EAAEF,mBAHX;AAIE,IAAA,QAAQ,EAAEvC,QAJZ;AAKE,kBAAYL,CAAC,CAAC,eAAD,CALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGW,iBAAiB,IAAI,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPxB,CANJ,EAgBE,MAAC,UAAD;AAAY,IAAA,QAAQ,EAAEG,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF,CAbF,EA+BGA,QAAQ,IACP;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CAhCJ,CADF;AAyCD,CA9HD;;AAgIA,eAAef,QAAf","sourcesContent":["/**\n * A generic dropdown component.  It takes the children of the component\n * and hosts it in the component.  When the component is selected, it\n * drops-down the contentComponent and applies the contentProps.\n */\nimport React, { useEffect, useRef, useState } from \"react\";\n\nimport { useDidUpdateEffect } from \"../hooks/use-did-update-effect\";\nimport { useKey } from \"../hooks/use-key\";\nimport { useMultiSelect } from \"../hooks/use-multi-select\";\nimport { KEY } from \"../lib/constants\";\nimport SelectPanel from \"../select-panel\";\nimport { Cross } from \"../select-panel/cross\";\nimport { Arrow } from \"./arrow\";\nimport { DropdownHeader } from \"./header\";\nimport { Loading } from \"./loading\";\n\nconst Dropdown = () => {\n  const {\n    t,\n    onMenuToggle,\n    ArrowRenderer,\n    shouldToggleOnHover,\n    isLoading,\n    disabled,\n    onChange,\n    labelledBy,\n    value,\n    isOpen,\n    defaultIsOpen,\n    ClearSelectedIcon,\n  } = useMultiSelect();\n\n  const [isInternalExpand, setIsInternalExpand] = useState(true);\n  const [expanded, setExpanded] = useState(defaultIsOpen);\n  const [hasFocus, setHasFocus] = useState(false);\n  const FinalArrow = ArrowRenderer || Arrow;\n\n  const wrapper: any = useRef();\n\n  useDidUpdateEffect(() => {\n    onMenuToggle && onMenuToggle(expanded);\n  }, [expanded]);\n\n  useEffect(() => {\n    if (defaultIsOpen === undefined && typeof isOpen === \"boolean\") {\n      setIsInternalExpand(false);\n      setExpanded(isOpen);\n    }\n  }, [isOpen]);\n\n  const handleKeyDown = (e) => {\n    // allows space and enter when focused on input/button\n    if (\n      [\"text\", \"button\"].includes(e.target.type) &&\n      [KEY.SPACE, KEY.ENTER].includes(e.code)\n    ) {\n      return;\n    }\n\n    if (isInternalExpand) {\n      if (e.code === KEY.ESCAPE) {\n        setExpanded(false);\n        wrapper?.current?.focus();\n      } else {\n        setExpanded(true);\n      }\n    }\n    e.preventDefault();\n  };\n\n  useKey([KEY.ENTER, KEY.ARROW_DOWN, KEY.SPACE, KEY.ESCAPE], handleKeyDown, {\n    target: wrapper,\n  });\n\n  const handleHover = (iexpanded: boolean) => {\n    isInternalExpand && shouldToggleOnHover && setExpanded(iexpanded);\n  };\n\n  const handleFocus = () => !hasFocus && setHasFocus(true);\n\n  const handleBlur = (e) => {\n    if (!e.currentTarget.contains(e.relatedTarget) && isInternalExpand) {\n      setHasFocus(false);\n      setExpanded(false);\n    }\n  };\n\n  const handleMouseEnter = () => handleHover(true);\n\n  const handleMouseLeave = () => handleHover(false);\n\n  const toggleExpanded = () => {\n    isInternalExpand && setExpanded(isLoading || disabled ? false : !expanded);\n  };\n\n  const handleClearSelected = (e) => {\n    e.stopPropagation();\n    onChange([]);\n    isInternalExpand && setExpanded(false);\n  };\n\n  return (\n    <div\n      tabIndex={0}\n      className=\"dropdown-container\"\n      aria-labelledby={labelledBy}\n      aria-expanded={expanded}\n      aria-readonly={true}\n      aria-disabled={disabled}\n      ref={wrapper}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <div className=\"dropdown-heading\" onClick={toggleExpanded}>\n        <div className=\"dropdown-heading-value\">\n          <DropdownHeader />\n        </div>\n        {isLoading && <Loading />}\n        {value.length > 0 && (\n          <button\n            type=\"button\"\n            className=\"clear-selected-button\"\n            onClick={handleClearSelected}\n            disabled={disabled}\n            aria-label={t(\"clearSelected\")}\n          >\n            {ClearSelectedIcon || <Cross />}\n          </button>\n        )}\n        <FinalArrow expanded={expanded} />\n      </div>\n      {expanded && (\n        <div className=\"dropdown-content\">\n          <div className=\"panel-content\">\n            <SelectPanel />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Dropdown;\n"]},"metadata":{},"sourceType":"module"}