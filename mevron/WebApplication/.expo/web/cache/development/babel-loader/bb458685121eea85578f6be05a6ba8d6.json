{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\GavelProjects\\\\JusticeClock\\\\JusticeClock\\\\WebApplication\\\\_CrossBasement\\\\CrossCore\\\\components\\\\Selects\\\\hooks\\\\use-multi-select.tsx\";\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { injectStyles } from \"../lib/inject-style\";\nvar defaultStrings = {\n  allItemsAreSelected: \"All items are selected.\",\n  clearSearch: \"Clear Search\",\n  clearSelected: \"Clear Selected\",\n  noOptions: \"No options\",\n  search: \"Search\",\n  selectAll: \"Select All\",\n  selectAllFiltered: \"Select All (Filtered)\",\n  selectSomeItems: \"Select...\",\n  create: \"Create\"\n};\nvar defaultProps = {\n  value: [],\n  hasSelectAll: true,\n  className: \"multi-select\",\n  debounceDuration: 200,\n  options: []\n};\nvar MultiSelectContext = React.createContext({});\nexport var MultiSelectProvider = function MultiSelectProvider(_ref) {\n  var props = _ref.props,\n      children = _ref.children;\n\n  var _useState = useState(props.options),\n      options = _useState[0],\n      setOptions = _useState[1];\n\n  var t = function t(key) {\n    var _props$overrideString;\n\n    return ((_props$overrideString = props.overrideStrings) === null || _props$overrideString === void 0 ? void 0 : _props$overrideString[key]) || defaultStrings[key];\n  };\n\n  useMemo(function () {\n    return injectStyles();\n  }, []);\n  useEffect(function () {\n    setOptions(props.options);\n  }, [props.options]);\n  return __jsx(MultiSelectContext.Provider, {\n    value: _objectSpread({\n      t: t\n    }, defaultProps, {}, props, {\n      options: options,\n      setOptions: setOptions\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport var useMultiSelect = function useMultiSelect() {\n  return React.useContext(MultiSelectContext);\n};","map":{"version":3,"sources":["C:/GavelProjects/JusticeClock/JusticeClock/WebApplication/_CrossBasement/CrossCore/components/Selects/hooks/use-multi-select.tsx"],"names":["React","useEffect","useMemo","useState","injectStyles","defaultStrings","allItemsAreSelected","clearSearch","clearSelected","noOptions","search","selectAll","selectAllFiltered","selectSomeItems","create","defaultProps","value","hasSelectAll","className","debounceDuration","options","MultiSelectContext","createContext","MultiSelectProvider","props","children","setOptions","t","key","overrideStrings","useMultiSelect","useContext"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,QAApC,QAAoD,OAApD;AAEA,SAASC,YAAT;AAGA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,mBAAmB,EAAE,yBADA;AAErBC,EAAAA,WAAW,EAAE,cAFQ;AAGrBC,EAAAA,aAAa,EAAE,gBAHM;AAIrBC,EAAAA,SAAS,EAAE,YAJU;AAKrBC,EAAAA,MAAM,EAAE,QALa;AAMrBC,EAAAA,SAAS,EAAE,YANU;AAOrBC,EAAAA,iBAAiB,EAAE,uBAPE;AAQrBC,EAAAA,eAAe,EAAE,WARI;AASrBC,EAAAA,MAAM,EAAE;AATa,CAAvB;AAYA,IAAMC,YAAmC,GAAG;AAC1CC,EAAAA,KAAK,EAAE,EADmC;AAE1CC,EAAAA,YAAY,EAAE,IAF4B;AAG1CC,EAAAA,SAAS,EAAE,cAH+B;AAI1CC,EAAAA,gBAAgB,EAAE,GAJwB;AAK1CC,EAAAA,OAAO,EAAE;AALiC,CAA5C;AAkBA,IAAMC,kBAAkB,GAAGrB,KAAK,CAACsB,aAAN,CACzB,EADyB,CAA3B;AAIA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,OAGH;AAAA,MAF9BC,KAE8B,QAF9BA,KAE8B;AAAA,MAD9BC,QAC8B,QAD9BA,QAC8B;;AAC9B,kBAA8BtB,QAAQ,CAACqB,KAAK,CAACJ,OAAP,CAAtC;AAAA,MAAOA,OAAP;AAAA,MAAgBM,UAAhB;;AACA,MAAMC,CAAC,GAAG,SAAJA,CAAI,CAACC,GAAD;AAAA;;AAAA,WAAS,0BAAAJ,KAAK,CAACK,eAAN,gFAAwBD,GAAxB,MAAgCvB,cAAc,CAACuB,GAAD,CAAvD;AAAA,GAAV;;AAEA1B,EAAAA,OAAO,CAAC;AAAA,WAAME,YAAY,EAAlB;AAAA,GAAD,EAAuB,EAAvB,CAAP;AAEAH,EAAAA,SAAS,CAAC,YAAM;AACdyB,IAAAA,UAAU,CAACF,KAAK,CAACJ,OAAP,CAAV;AACD,GAFQ,EAEN,CAACI,KAAK,CAACJ,OAAP,CAFM,CAAT;AAIA,SACE,MAAC,kBAAD,CAAoB,QAApB;AACE,IAAA,KAAK;AAAIO,MAAAA,CAAC,EAADA;AAAJ,OAAUZ,YAAV,MAA2BS,KAA3B;AAAkCJ,MAAAA,OAAO,EAAPA,OAAlC;AAA2CM,MAAAA,UAAU,EAAVA;AAA3C,MADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGD,QAHH,CADF;AAOD,CApBM;AAsBP,OAAO,IAAMK,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAM9B,KAAK,CAAC+B,UAAN,CAAiBV,kBAAjB,CAAN;AAAA,CAAvB","sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\";\n\nimport { injectStyles } from \"../lib/inject-style\";\nimport { ISelectProps, Option } from \"../lib/interfaces\";\n\nconst defaultStrings = {\n  allItemsAreSelected: \"All items are selected.\",\n  clearSearch: \"Clear Search\",\n  clearSelected: \"Clear Selected\",\n  noOptions: \"No options\",\n  search: \"Search\",\n  selectAll: \"Select All\",\n  selectAllFiltered: \"Select All (Filtered)\",\n  selectSomeItems: \"Select...\",\n  create: \"Create\",\n};\n\nconst defaultProps: Partial<ISelectProps> = {\n  value: [],\n  hasSelectAll: true,\n  className: \"multi-select\",\n  debounceDuration: 200,\n  options: [] as Option[],\n};\n\ninterface MultiSelectContextProps extends ISelectProps {\n  t: (key: string) => string;\n  setOptions?;\n}\n\ninterface MultiSelectProviderProps {\n  props: ISelectProps;\n  children;\n}\n\nconst MultiSelectContext = React.createContext<MultiSelectContextProps>(\n  {} as MultiSelectContextProps\n);\n\nexport const MultiSelectProvider = ({\n  props,\n  children,\n}: MultiSelectProviderProps) => {\n  const [options, setOptions] = useState(props.options);\n  const t = (key) => props.overrideStrings?.[key] || defaultStrings[key];\n\n  useMemo(() => injectStyles(), []);\n\n  useEffect(() => {\n    setOptions(props.options);\n  }, [props.options]);\n\n  return (\n    <MultiSelectContext.Provider\n      value={{ t, ...defaultProps, ...props, options, setOptions }}\n    >\n      {children}\n    </MultiSelectContext.Provider>\n  );\n};\n\nexport const useMultiSelect = () => React.useContext(MultiSelectContext);\n"]},"metadata":{},"sourceType":"module"}