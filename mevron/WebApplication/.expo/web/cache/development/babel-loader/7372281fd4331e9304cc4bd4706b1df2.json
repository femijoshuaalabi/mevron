{
    "ast": null,
    "code": "import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"C:\\\\GavelProjects\\\\mevron\\\\node_modules\\\\@expo\\\\vector-icons\\\\build\\\\vendor\\\\react-native-vector-icons\\\\lib\\\\create-icon-set.js\";\nvar _excluded = [\"name\", \"size\", \"color\", \"style\", \"children\"];\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { NativeModules, Platform, PixelRatio, processColor, Text } from \"./react-native\";\nimport ensureNativeModuleAvailable from \"./ensure-native-module-available\";\nimport createIconSourceCache from \"./create-icon-source-cache\";\nimport createIconButtonComponent from \"./icon-button\";\nimport createTabBarItemIOSComponent from \"./tab-bar-item-ios\";\nexport var NativeIconAPI = NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\nexport var DEFAULT_ICON_SIZE = 12;\nexport var DEFAULT_ICON_COLOR = 'black';\nexport default function createIconSet(glyphMap, fontFamily, fontFile, fontStyle) {\n  var fontBasename = fontFile ? fontFile.replace(/\\.(otf|ttf)$/, '') : fontFamily;\n  var fontReference = Platform.select({\n    windows: \"/Assets/\".concat(fontFile, \"#\").concat(fontFamily),\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily\n  });\n\n  var Icon = function (_PureComponent) {\n    _inherits(Icon, _PureComponent);\n\n    var _super = _createSuper(Icon);\n\n    function Icon() {\n      var _this;\n\n      _classCallCheck(this, Icon);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n\n      _defineProperty(_assertThisInitialized(_this), \"root\", null);\n\n      _defineProperty(_assertThisInitialized(_this), \"handleRef\", function (ref) {\n        _this.root = ref;\n      });\n\n      return _this;\n    }\n\n    _createClass(Icon, [{\n      key: \"setNativeProps\",\n      value: function setNativeProps(nativeProps) {\n        if (this.root) {\n          this.root.setNativeProps(nativeProps);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            name = _this$props.name,\n            size = _this$props.size,\n            color = _this$props.color,\n            style = _this$props.style,\n            children = _this$props.children,\n            props = _objectWithoutProperties(_this$props, _excluded);\n\n        var glyph = name ? glyphMap[name] || '?' : '';\n\n        if (typeof glyph === 'number') {\n          glyph = String.fromCodePoint(glyph);\n        }\n\n        var styleDefaults = {\n          fontSize: size,\n          color: color\n        };\n        var styleOverrides = {\n          fontFamily: fontReference,\n          fontWeight: 'normal',\n          fontStyle: 'normal'\n        };\n        props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n        props.ref = this.handleRef;\n        return __jsx(Text, _extends({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 9\n          }\n        }), glyph, children);\n      }\n    }]);\n\n    return Icon;\n  }(PureComponent);\n\n  _defineProperty(Icon, \"defaultProps\", {\n    size: DEFAULT_ICON_SIZE,\n    allowFontScaling: false\n  });\n\n  var imageSourceCache = createIconSourceCache();\n\n  function resolveGlyph(name) {\n    var glyph = glyphMap[name] || '?';\n\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n\n    return glyph;\n  }\n\n  function getImageSourceSync(name) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;\n    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;\n    ensureNativeModuleAvailable();\n    var glyph = resolveGlyph(name);\n    var processedColor = processColor(color);\n    var cacheKey = \"\".concat(glyph, \":\").concat(size, \":\").concat(processedColor);\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n\n    try {\n      var imagePath = NativeIconAPI.getImageForFontSync(fontReference, glyph, size, processedColor);\n      var value = {\n        uri: imagePath,\n        scale: PixelRatio.get()\n      };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  function getImageSource(name) {\n    var size,\n        color,\n        glyph,\n        processedColor,\n        cacheKey,\n        imagePath,\n        value,\n        _args = arguments;\n    return _regeneratorRuntime.async(function getImageSource$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            size = _args.length > 1 && _args[1] !== undefined ? _args[1] : DEFAULT_ICON_SIZE;\n            color = _args.length > 2 && _args[2] !== undefined ? _args[2] : DEFAULT_ICON_COLOR;\n            ensureNativeModuleAvailable();\n            glyph = resolveGlyph(name);\n            processedColor = processColor(color);\n            cacheKey = \"\".concat(glyph, \":\").concat(size, \":\").concat(processedColor);\n\n            if (!imageSourceCache.has(cacheKey)) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt(\"return\", imageSourceCache.get(cacheKey));\n\n          case 8:\n            _context.prev = 8;\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor));\n\n          case 11:\n            imagePath = _context.sent;\n            value = {\n              uri: imagePath,\n              scale: PixelRatio.get()\n            };\n            imageSourceCache.setValue(cacheKey, value);\n            return _context.abrupt(\"return\", value);\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](8);\n            imageSourceCache.setError(cacheKey, _context.t0);\n            throw _context.t0;\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[8, 17]], Promise);\n  }\n\n  function loadFont() {\n    var file,\n        _args2 = arguments;\n    return _regeneratorRuntime.async(function loadFont$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            file = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : fontFile;\n\n            if (!(Platform.OS === 'ios')) {\n              _context2.next = 7;\n              break;\n            }\n\n            ensureNativeModuleAvailable();\n\n            if (file) {\n              _context2.next = 5;\n              break;\n            }\n\n            throw new Error('Unable to load font, because no file was specified. ');\n\n          case 5:\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI, _toConsumableArray(file.split('.'))));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n  return Icon;\n}",
    "map": {
        "version": 3,
        "sources": [
            "C:/GavelProjects/mevron/node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/lib/create-icon-set.js"
        ],
        "names": [
            "React",
            "PureComponent",
            "PropTypes",
            "NativeModules",
            "Platform",
            "PixelRatio",
            "processColor",
            "Text",
            "ensureNativeModuleAvailable",
            "createIconSourceCache",
            "createIconButtonComponent",
            "createTabBarItemIOSComponent",
            "NativeIconAPI",
            "RNVectorIconsManager",
            "RNVectorIconsModule",
            "DEFAULT_ICON_SIZE",
            "DEFAULT_ICON_COLOR",
            "createIconSet",
            "glyphMap",
            "fontFamily",
            "fontFile",
            "fontStyle",
            "fontBasename",
            "replace",
            "fontReference",
            "select",
            "windows",
            "android",
            "web",
            "default",
            "Icon",
            "ref",
            "root",
            "nativeProps",
            "setNativeProps",
            "props",
            "name",
            "size",
            "color",
            "style",
            "children",
            "glyph",
            "String",
            "fromCodePoint",
            "styleDefaults",
            "fontSize",
            "styleOverrides",
            "fontWeight",
            "handleRef",
            "allowFontScaling",
            "imageSourceCache",
            "resolveGlyph",
            "getImageSourceSync",
            "processedColor",
            "cacheKey",
            "has",
            "get",
            "imagePath",
            "getImageForFontSync",
            "value",
            "uri",
            "scale",
            "setValue",
            "error",
            "setError",
            "getImageSource",
            "getImageForFont",
            "loadFont",
            "file",
            "OS",
            "Error",
            "loadFontWithFileName",
            "split",
            "hasIcon",
            "Object",
            "prototype",
            "hasOwnProperty",
            "call",
            "getRawGlyphMap",
            "getFontFamily",
            "Button",
            "TabBarItemIOS",
            "TabBarItem"
        ],
        "mappings": "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",
        "sourcesContent": [
            "import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  NativeModules,\n  Platform,\n  PixelRatio,\n  processColor,\n  Text,\n} from './react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconSourceCache from './create-icon-source-cache';\nimport createIconButtonComponent from './icon-button';\nimport createTabBarItemIOSComponent from './tab-bar-item-ios';\n\nexport const NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `/Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  class Icon extends PureComponent {\n    root = null;\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCodePoint(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n\n      return (\n        <Text {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = createIconSourceCache();\n\n  function resolveGlyph(name) {\n    const glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n    return glyph;\n  }\n\n  function getImageSourceSync(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = NativeIconAPI.getImageForFontSync(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = await NativeIconAPI.getImageForFont(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        throw new Error('Unable to load font, because no file was specified. ');\n      }\n      await NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"
        ]
    },
    "metadata": {},
    "sourceType": "module"
}
