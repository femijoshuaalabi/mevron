{"ast":null,"code":"import { useCallback, useEffect, useMemo, useRef } from \"react\";\nvar defaultOptions = {\n  when: true,\n  eventTypes: [\"keydown\"]\n};\n\nfunction useKey(input, callback, opts) {\n  var keyList = useMemo(function () {\n    return Array.isArray(input) ? input : [input];\n  }, [input]);\n  var options = Object.assign({}, defaultOptions, opts);\n  var when = options.when,\n      eventTypes = options.eventTypes;\n  var callbackRef = useRef(callback);\n  var target = options.target;\n  useEffect(function () {\n    callbackRef.current = callback;\n  });\n  var handle = useCallback(function (e) {\n    if (keyList.some(function (k) {\n      return e.key === k || e.code === k;\n    })) {\n      callbackRef.current(e);\n    }\n  }, [keyList]);\n  useEffect(function () {\n    if (when && typeof window !== \"undefined\") {\n      var targetNode = target ? target[\"current\"] : window;\n      eventTypes.forEach(function (eventType) {\n        targetNode && targetNode.addEventListener(eventType, handle);\n      });\n      return function () {\n        eventTypes.forEach(function (eventType) {\n          targetNode && targetNode.removeEventListener(eventType, handle);\n        });\n      };\n    }\n  }, [when, eventTypes, keyList, target, callback]);\n}\n\nexport { useKey };","map":{"version":3,"sources":["C:/GavelProjects/JusticeClock/JusticeClock/WebApplication/_CrossBasement/CrossCore/components/Selects/hooks/use-key.tsx"],"names":["useCallback","useEffect","useMemo","useRef","defaultOptions","when","eventTypes","useKey","input","callback","opts","keyList","Array","isArray","options","Object","assign","callbackRef","target","current","handle","e","some","k","key","code","window","targetNode","forEach","eventType","addEventListener","removeEventListener"],"mappings":"AAGA,SAAcA,WAAd,EAA2BC,SAA3B,EAAsCC,OAAtC,EAA+CC,MAA/C,QAA6D,OAA7D;AAkBA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,IAAI,EAAE,IADe;AAErBC,EAAAA,UAAU,EAAE,CAAC,SAAD;AAFS,CAAvB;;AAcA,SAASC,MAAT,CACEC,KADF,EAEEC,QAFF,EAGEC,IAHF,EAIQ;AACN,MAAMC,OAA+B,GAAGT,OAAO,CAC7C;AAAA,WAAOU,KAAK,CAACC,OAAN,CAAcL,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAAtC;AAAA,GAD6C,EAE7C,CAACA,KAAD,CAF6C,CAA/C;AAIA,MAAMM,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,cAAlB,EAAkCM,IAAlC,CAAhB;AACA,MAAQL,IAAR,GAA6BS,OAA7B,CAAQT,IAAR;AAAA,MAAcC,UAAd,GAA6BQ,OAA7B,CAAcR,UAAd;AACA,MAAMW,WAAW,GAAGd,MAAM,CAA4BM,QAA5B,CAA1B;AACA,MAAQS,MAAR,GAAmBJ,OAAnB,CAAQI,MAAR;AAEAjB,EAAAA,SAAS,CAAC,YAAM;AACdgB,IAAAA,WAAW,CAACE,OAAZ,GAAsBV,QAAtB;AACD,GAFQ,CAAT;AAIA,MAAMW,MAAM,GAAGpB,WAAW,CACxB,UAACqB,CAAD,EAAsB;AACpB,QAAIV,OAAO,CAACW,IAAR,CAAa,UAACC,CAAD;AAAA,aAAOF,CAAC,CAACG,GAAF,KAAUD,CAAV,IAAeF,CAAC,CAACI,IAAF,KAAWF,CAAjC;AAAA,KAAb,CAAJ,EAAsD;AACpDN,MAAAA,WAAW,CAACE,OAAZ,CAAoBE,CAApB;AACD;AACF,GALuB,EAMxB,CAACV,OAAD,CANwB,CAA1B;AASAV,EAAAA,SAAS,CAAC,YAAW;AACnB,QAAII,IAAI,IAAI,OAAOqB,MAAP,KAAkB,WAA9B,EAA2C;AACzC,UAAMC,UAAU,GAAGT,MAAM,GAAGA,MAAM,CAAC,SAAD,CAAT,GAAuBQ,MAAhD;AACApB,MAAAA,UAAU,CAACsB,OAAX,CAAmB,UAACC,SAAD,EAAe;AAChCF,QAAAA,UAAU,IAAIA,UAAU,CAACG,gBAAX,CAA4BD,SAA5B,EAAuCT,MAAvC,CAAd;AACD,OAFD;AAGA,aAAO,YAAM;AACXd,QAAAA,UAAU,CAACsB,OAAX,CAAmB,UAACC,SAAD,EAAe;AAChCF,UAAAA,UAAU,IAAIA,UAAU,CAACI,mBAAX,CAA+BF,SAA/B,EAA0CT,MAA1C,CAAd;AACD,SAFD;AAGD,OAJD;AAKD;AACF,GAZQ,EAYN,CAACf,IAAD,EAAOC,UAAP,EAAmBK,OAAnB,EAA4BO,MAA5B,EAAoCT,QAApC,CAZM,CAAT;AAaD;;AAED,SAASF,MAAT","sourcesContent":["/*\n * copied from https://github.com/imbhargav5/rooks/blob/master/packages/shared/useKeyRef.ts\n */\nimport { Ref, useCallback, useEffect, useMemo, useRef } from \"react\";\n\ninterface Options {\n  /**\n   * Condition which if true, will enable the event listeners\n   */\n  when?: boolean;\n  /**\n   * Keyboardevent types to listen for. Valid options are keyDown, keyPress and keyUp\n   */\n  eventTypes?: Array<string | number>;\n  /**\n   * target ref on which the events should be listened. If no target is specified,\n   * events are listened to on the window\n   */\n  target?: Ref<HTMLElement> | null;\n}\n\nconst defaultOptions = {\n  when: true,\n  eventTypes: [\"keydown\"],\n};\n\n/**\n * useKey hook\n *\n * Fires a callback on keyboard events like keyDown, keyPress and keyUp\n *\n * @param {[string|number]} keyList\n * @param {function} callback\n * @param {Options} options\n */\nfunction useKey(\n  input: string | number | Array<string | number>,\n  callback: (e: KeyboardEvent) => any,\n  opts?: Options\n): void {\n  const keyList: Array<string | number> = useMemo(\n    () => (Array.isArray(input) ? input : [input]),\n    [input]\n  );\n  const options = Object.assign({}, defaultOptions, opts);\n  const { when, eventTypes } = options;\n  const callbackRef = useRef<(e: KeyboardEvent) => any>(callback);\n  const { target } = options;\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  const handle = useCallback(\n    (e: KeyboardEvent) => {\n      if (keyList.some((k) => e.key === k || e.code === k)) {\n        callbackRef.current(e);\n      }\n    },\n    [keyList]\n  );\n\n  useEffect((): any => {\n    if (when && typeof window !== \"undefined\") {\n      const targetNode = target ? target[\"current\"] : window;\n      eventTypes.forEach((eventType) => {\n        targetNode && targetNode.addEventListener(eventType, handle);\n      });\n      return () => {\n        eventTypes.forEach((eventType) => {\n          targetNode && targetNode.removeEventListener(eventType, handle);\n        });\n      };\n    }\n  }, [when, eventTypes, keyList, target, callback]);\n}\n\nexport { useKey };\n"]},"metadata":{},"sourceType":"module"}