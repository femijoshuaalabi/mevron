{
    "ast": null,
    "code": "var _this = this,\n    _jsxFileName = \"C:\\\\GavelProjects\\\\mevron\\\\mevron\\\\WebApplication\\\\_CrossBasement\\\\CrossCore\\\\components\\\\Selects\\\\multi-select\\\\header.tsx\";\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useMultiSelect } from \"../hooks/use-multi-select\";\nexport var DropdownHeader = function DropdownHeader() {\n  var _useMultiSelect = useMultiSelect(),\n      t = _useMultiSelect.t,\n      value = _useMultiSelect.value,\n      options = _useMultiSelect.options,\n      valueRenderer = _useMultiSelect.valueRenderer;\n\n  var noneSelected = value.length === 0;\n  var allSelected = value.length === options.length;\n  var customText = valueRenderer && valueRenderer(value, options);\n\n  var getSelectedText = function getSelectedText() {\n    return value.map(function (s) {\n      return s.label;\n    }).join(\", \");\n  };\n\n  return noneSelected ? __jsx(\"span\", {\n    className: \"gray\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, customText || t(\"selectSomeItems\")) : __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, customText || (allSelected ? t(\"allItemsAreSelected\") : getSelectedText()));\n};",
    "map": {
        "version": 3,
        "sources": [
            "C:/GavelProjects/mevron/mevron/WebApplication/_CrossBasement/CrossCore/components/Selects/multi-select/header.tsx"
        ],
        "names": [
            "React",
            "useMultiSelect",
            "DropdownHeader",
            "t",
            "value",
            "options",
            "valueRenderer",
            "noneSelected",
            "length",
            "allSelected",
            "customText",
            "getSelectedText",
            "map",
            "s",
            "label",
            "join"
        ],
        "mappings": ";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,cAAT;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAClC,wBAA6CD,cAAc,EAA3D;AAAA,MAAQE,CAAR,mBAAQA,CAAR;AAAA,MAAWC,KAAX,mBAAWA,KAAX;AAAA,MAAkBC,OAAlB,mBAAkBA,OAAlB;AAAA,MAA2BC,aAA3B,mBAA2BA,aAA3B;;AAEA,MAAMC,YAAY,GAAGH,KAAK,CAACI,MAAN,KAAiB,CAAtC;AACA,MAAMC,WAAW,GAAGL,KAAK,CAACI,MAAN,KAAiBH,OAAO,CAACG,MAA7C;AACA,MAAME,UAAU,GAAGJ,aAAa,IAAIA,aAAa,CAACF,KAAD,EAAQC,OAAR,CAAjD;;AAEA,MAAMM,eAAe,GAAG,SAAlBA,eAAkB;AAAA,WAAMP,KAAK,CAACQ,GAAN,CAAU,UAACC,CAAD;AAAA,aAAOA,CAAC,CAACC,KAAT;AAAA,KAAV,EAA0BC,IAA1B,CAA+B,IAA/B,CAAN;AAAA,GAAxB;;AAEA,SAAOR,YAAY,GACjB;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBG,UAAU,IAAIP,CAAC,CAAC,iBAAD,CAAvC,CADiB,GAGjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGO,UAAU,KACRD,WAAW,GAAGN,CAAC,CAAC,qBAAD,CAAJ,GAA8BQ,eAAe,EADhD,CADb,CAHF;AAQD,CAjBM",
        "sourcesContent": [
            "import React from \"react\";\n\nimport { useMultiSelect } from \"../hooks/use-multi-select\";\n\nexport const DropdownHeader = () => {\n  const { t, value, options, valueRenderer } = useMultiSelect();\n\n  const noneSelected = value.length === 0;\n  const allSelected = value.length === options.length;\n  const customText = valueRenderer && valueRenderer(value, options);\n\n  const getSelectedText = () => value.map((s) => s.label).join(\", \");\n\n  return noneSelected ? (\n    <span className=\"gray\">{customText || t(\"selectSomeItems\")}</span>\n  ) : (\n    <span>\n      {customText ||\n        (allSelected ? t(\"allItemsAreSelected\") : getSelectedText())}\n    </span>\n  );\n};\n"
        ]
    },
    "metadata": {},
    "sourceType": "module"
}
