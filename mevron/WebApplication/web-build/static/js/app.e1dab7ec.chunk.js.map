{
    "version": 3,
    "sources": [
        "webpack:///C:/GavelProjects/mevron/JusticeClock/WebApplication/src/normalized.css?ee00",
        "src/normalized.css",
        "src/fonts/Roboto-Regular.ttf",
        "src/fonts/Roboto-Bold.ttf",
        "src/fonts/OpenSansBold.ttf",
        "webpack:///C:/GavelProjects/mevron/JusticeClock/WebApplication/src/App.css?2454",
        "src/App.css",
        "src/serviceWorker.ts",
        "src/routes/index.js",
        "src/App.jsx",
        "src/index.jsx"
    ],
    "names": [
        "api",
        "content",
        "__esModule",
        "default",
        "module",
        "i",
        "options",
        "exports",
        "locals",
        "___CSS_LOADER_API_IMPORT___",
        "___CSS_LOADER_GET_URL_IMPORT___",
        "___CSS_LOADER_URL_IMPORT_0___",
        "___CSS_LOADER_URL_IMPORT_1___",
        "___CSS_LOADER_URL_IMPORT_2___",
        "___CSS_LOADER_URL_REPLACEMENT_0___",
        "___CSS_LOADER_URL_REPLACEMENT_1___",
        "___CSS_LOADER_URL_REPLACEMENT_2___",
        "push",
        "Boolean",
        "window",
        "location",
        "hostname",
        "match",
        "Routes",
        "fallback",
        "exact",
        "path",
        "component",
        "lazy",
        "App",
        "AppRegistry",
        "registerComponent",
        "runApplication",
        "rootTag",
        "document",
        "getElementById",
        "navigator",
        "serviceWorker",
        "ready",
        "then",
        "registration",
        "unregister",
        "catch",
        "error",
        "console",
        "message"
    ],
    "mappings": "+GAAA,IAAIA,EAAM,EAAQ,KACFC,EAAU,EAAQ,KAIC,kBAFvBA,EAAUA,EAAQC,WAAaD,EAAQE,QAAUF,KAG/CA,EAAU,CAAC,CAACG,EAAOC,EAAIJ,EAAS,MAG9C,IAAIK,EAAU,CAEd,OAAiB,OACjB,WAAoB,GAEPN,EAAIC,EAASK,GAI1BF,EAAOG,QAAUN,EAAQO,QAAU,I,oBCjBnC,IAAIC,EAA8B,EAAQ,KACtCC,EAAkC,EAAQ,KAC1CC,EAAgC,EAAQ,KACxCC,EAAgC,EAAQ,KACxCC,EAAgC,EAAQ,KAC5CN,EAAUE,GAA4B,GACtC,IAAIK,EAAqCJ,EAAgCC,GACrEI,EAAqCL,EAAgCE,GACrEI,EAAqCN,EAAgCG,GAEzEN,EAAQU,KAAK,CAACb,EAAOC,EAAI,qFAAyFS,EAAqC,sEAAwEC,EAAqC,yEAA2EC,EAAqC,wlOAAylO,KAE78OZ,EAAOG,QAAUA,G,oBCbjBH,EAAOG,QAAU,IAA0B,8B,oBCA3CH,EAAOG,QAAU,IAA0B,2B,oBCA3CH,EAAOG,QAAU,IAA0B,4B,oBCA3C,IAAIP,EAAM,EAAQ,KACFC,EAAU,EAAQ,KAIC,kBAFvBA,EAAUA,EAAQC,WAAaD,EAAQE,QAAUF,KAG/CA,EAAU,CAAC,CAACG,EAAOC,EAAIJ,EAAS,MAG9C,IAAIK,EAAU,CAEd,OAAiB,OACjB,WAAoB,GAEPN,EAAIC,EAASK,GAI1BF,EAAOG,QAAUN,EAAQO,QAAU,I,qBChBnCD,EADkC,EAAQ,IAChCE,EAA4B,IAE9BQ,KAAK,CAACb,EAAOC,EAAI,gkBAAikB,KAE1lBD,EAAOG,QAAUA,G,mECQGW,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,mDCJxBC,EAZA,WACX,OACI,kBAAC,IAAD,KACI,kBAAC,WAAD,CAAUC,SAAS,cACf,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,gBAAK,kBAAM,6DCFjDC,EADH,kBAAM,kBAAC,EAAD,OCClBC,IAAYC,kBAAkB,OAAO,kBAAMF,KAE3CC,IAAYE,eAAe,MAAO,CAC9BC,QAASC,SAASC,eAAe,UH0H7B,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJC,QAAQD,MAAMA,EAAME,c",
    "file": "static/js/app.e1dab7ec.chunk.js",
    "sourcesContent": [
        "var api = require(\"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!./normalized.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};",
        "// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_GET_URL_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/getUrl.js\");\nvar ___CSS_LOADER_URL_IMPORT_0___ = require(\"./fonts/Roboto-Regular.ttf\");\nvar ___CSS_LOADER_URL_IMPORT_1___ = require(\"./fonts/Roboto-Bold.ttf\");\nvar ___CSS_LOADER_URL_IMPORT_2___ = require(\"./fonts/OpenSansBold.ttf\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_0___);\nvar ___CSS_LOADER_URL_REPLACEMENT_1___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_1___);\nvar ___CSS_LOADER_URL_REPLACEMENT_2___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_2___);\n// Module\nexports.push([module.id, \"@charset \\\"utf-8\\\";\\n\\n@font-face {\\n    font-family: Roboto-Regular;\\n    src: url(\" + ___CSS_LOADER_URL_REPLACEMENT_0___ + \");\\n}\\n\\n@font-face {\\n    font-family: Roboto-Bold;\\n    src: url(\" + ___CSS_LOADER_URL_REPLACEMENT_1___ + \");\\n}\\n\\n@font-face {\\n    font-family: Open Sans Bold;\\n    src: url(\" + ___CSS_LOADER_URL_REPLACEMENT_2___ + \");\\n}\\n\\n/* ===> Global selectors <=== */\\n\\n* {\\n    padding: 0;\\n    margin: 0;\\n}\\n\\n*,\\n::before,\\n::after {\\n    background-repeat: no-repeat;\\n    box-sizing: inherit;\\n}\\n\\n::before,\\n::after {\\n    text-decoration: inherit;\\n    vertical-align: inherit;\\n}\\n\\n*:focus {\\n    outline: none;\\n}\\ninput:focus,\\nselect:focus,\\ntextarea:focus,\\nbutton:focus {\\n    outline: none !important;\\n    outline-width: 0 !important;\\n    box-shadow: none;\\n    -moz-box-shadow: none;\\n    -webkit-box-shadow: none;\\n}\\n[contenteditable='true']:focus {\\n    outline: none;\\n}\\n\\n.d-flex {\\n    display: flex;\\n}\\n/* ===> General elements <=== */\\n\\nhtml {\\n    box-sizing: border-box;\\n    -webkit-text-size-adjust: 100%; /* Prevent adjustments of font size after orientation changes in iOS */\\n    -moz-tab-size: 2;\\n    tab-size: 2;\\n    -webkit-font-smoothing: antialiased;\\n    -moz-osx-font-smoothing: grayscale;\\n}\\n\\nbody {\\n    background-color: #fff;\\n    font-size: 0.9375rem;\\n    overflow: hidden;\\n    line-height: 1.42857;\\n    color: #14171a;\\n    display: flex;\\n    flex-direction: column;\\n    padding: 0;\\n    margin: 0;\\n    font-family: 'Roboto-Regular', Arial, 'Helvetica', sans-serif;\\n    -moz-box-sizing: border-box;\\n    box-sizing: border-box;\\n}\\n\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6 {\\n    font-family: 'Open Sans Bold', Arial, Helvetica, sans-serif;\\n}\\n\\nhr {\\n    overflow: visible; /* Show the overflow in Edge and IE */\\n    height: 0; /* Add the correct box sizing in Firefox */\\n}\\n\\nblockquote,\\nbody,\\ndd,\\ndiv,\\ndl,\\ndt,\\nfieldset,\\nform,\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6,\\ninput,\\nli,\\nol,\\np,\\npre,\\ntd,\\ntextarea,\\nth,\\nul {\\n    margin: 0;\\n    padding: 0;\\n}\\n\\ndetails,\\nmain {\\n    display: block; /* Render the `main` element consistently in IE. */\\n}\\n\\nsummary {\\n    display: list-item; /* Add the correct display in all browsers */\\n}\\n\\nsmall {\\n    font-size: 80%; /* Set font-size to 80% in `small` elements */\\n}\\n\\n[hidden] {\\n    display: none; /* Add the correct display in IE */\\n}\\n\\nabbr[title] {\\n    border-bottom: none; /* Remove the bottom border in Chrome 57 */\\n\\n    /* Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari */\\n    text-decoration: underline;\\n    text-decoration: underline dotted;\\n}\\n\\na {\\n    color: #105e54;\\n    text-decoration: none;\\n    /* display: flex; */\\n}\\n\\na:active,\\na:hover {\\n    outline-width: 0; /* Remove the outline when hovering in all browsers */\\n}\\n\\ncode,\\nkbd,\\npre,\\nsamp {\\n    font-family: monospace; /* Specify the font family of code elements */\\n}\\n\\npre {\\n    font-size: 1em; /* Correct the odd `em` font sizing in all browsers */\\n}\\n\\nb,\\nstrong {\\n    font-weight: bolder; /* Add the correct font weight in Chrome, Edge, and Safari */\\n}\\n\\n/* https://gist.github.com/unruthless/413930 */\\nsub,\\nsup {\\n    font-size: 75%;\\n    line-height: 0;\\n    position: relative;\\n    vertical-align: baseline;\\n}\\n\\nsub {\\n    bottom: -0.25em;\\n}\\n\\nsup {\\n    top: -0.5em;\\n}\\n\\n/* ===> Forms <=== */\\n\\ninput {\\n    border-radius: 0;\\n}\\n\\n/* Replace pointer cursor in disabled elements */\\n[disabled] {\\n    cursor: default;\\n}\\n\\n[type='number']::-webkit-inner-spin-button,\\n[type='number']::-webkit-outer-spin-button {\\n    height: auto; /* Correct the cursor style of increment and decrement buttons in Chrome */\\n}\\n\\n[type='search'] {\\n    -webkit-appearance: textfield; /* Correct the odd appearance in Chrome and Safari */\\n    outline-offset: -2px; /* Correct the outline style in Safari */\\n}\\n\\n[type='search']::-webkit-search-decoration {\\n    -webkit-appearance: none; /* Remove the inner padding in Chrome and Safari on macOS */\\n}\\n\\ntextarea {\\n    overflow: auto; /* Internet Explorer 11+ */\\n    resize: vertical; /* Specify textarea resizability */\\n}\\n\\nbutton,\\ninput,\\noptgroup,\\nselect,\\ntextarea {\\n    font: inherit; /* Specify font inheritance of form elements */\\n}\\n\\noptgroup {\\n    font-weight: bold; /* Restore the font weight unset by the previous rule */\\n}\\n\\nbutton {\\n    overflow: visible; /* Address `overflow` set to `hidden` in IE 8/9/10/11 */\\n}\\n\\nbutton,\\nselect {\\n    text-transform: none; /* Firefox 40+, Internet Explorer 11- */\\n}\\n\\n/* Remove the default button styling in all browsers */\\nbutton,\\ninput,\\nselect,\\ntextarea {\\n    background-color: transparent;\\n    border-style: none;\\n}\\n\\n/* Apply cursor pointer to button elements */\\nbutton,\\n[type='button'],\\n[type='reset'],\\n[type='submit'],\\n[role='button'] {\\n    cursor: pointer;\\n    color: inherit;\\n    font-family: 'Open Sans Bold', Arial, Helvetica, sans-serif;\\n}\\n\\nbutton,\\nhtml [type=\\\"button\\\"], /* Prevent a WebKit bug where (2) destroys native `audio` and `video`controls in Android 4 */\\n[type=\\\"reset\\\"],\\n[type=\\\"submit\\\"] {\\n    -webkit-appearance: button; /* Correct the inability to style clickable types in iOS */\\n}\\n\\n/* Remove inner padding and border in Firefox 4+ */\\nbutton::-moz-focus-inner,\\n[type='button']::-moz-focus-inner,\\n[type='reset']::-moz-focus-inner,\\n[type='submit']::-moz-focus-inner {\\n    border-style: none;\\n    padding: 0;\\n}\\n\\n/* Replace focus style removed in the border reset above */\\nbutton:-moz-focusring,\\n[type='button']::-moz-focus-inner,\\n[type='reset']::-moz-focus-inner,\\n[type='submit']::-moz-focus-inner {\\n    outline: 1px dotted ButtonText;\\n}\\n\\n/* Style select like a standard input */\\nselect {\\n    -moz-appearance: none; /* Firefox 36+ */\\n    -webkit-appearance: none; /* Chrome 41+ */\\n}\\n\\nselect::-ms-expand {\\n    display: none; /* Internet Explorer 11+ */\\n}\\n\\nselect::-ms-value {\\n    color: currentColor; /* Internet Explorer 11+ */\\n}\\n\\nlegend {\\n    border: 0; /* Correct `color` not being inherited in IE 8/9/10/11 */\\n    color: inherit; /* Correct the color inheritance from `fieldset` elements in IE */\\n    display: table; /* Correct the text wrapping in Edge and IE */\\n    white-space: normal; /* Correct the text wrapping in Edge and IE */\\n    max-width: 100%; /* Correct the text wrapping in Edge 18- and IE */\\n}\\n\\n::-webkit-file-upload-button {\\n    /* Correct the inability to style clickable types in iOS and Safari */\\n    -webkit-appearance: button;\\n    color: inherit;\\n    font: inherit; /* Change font properties to `inherit` in Chrome and Safari */\\n}\\n\\n/* ===> Specify media element style <=== */\\n\\nimg {\\n    border-style: none; /* Remove border when inside `a` element in IE 8/9/10 */\\n}\\n\\n/* Add the correct vertical alignment in Chrome, Firefox, and Opera */\\nprogress {\\n    vertical-align: baseline;\\n}\\n\\ntemplate {\\n    display: none;\\n}\\n\\n/* ===> Accessibility <=== */\\n\\n/* Hide content from screens but not screenreaders */\\n@media screen {\\n    [hidden~='screen'] {\\n        display: inherit;\\n    }\\n\\n    [hidden~='screen']:not(:active):not(:focus):not(:target) {\\n        position: absolute !important;\\n        clip: rect(0 0 0 0) !important;\\n    }\\n}\\n\\n/* Specify the progress cursor of updating elements */\\n[aria-busy='true'] {\\n    cursor: progress;\\n}\\n\\n/* Specify the pointer cursor of trigger elements */\\n[aria-controls] {\\n    cursor: pointer;\\n}\\n\\n/* Specify the unstyled cursor of disabled, not-editable, or otherwise inoperable elements */\\n[aria-disabled] {\\n    cursor: default;\\n}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n",
        "module.exports = __webpack_public_path__ + \"./fonts/Roboto-Regular.ttf\";",
        "module.exports = __webpack_public_path__ + \"./fonts/Roboto-Bold.ttf\";",
        "module.exports = __webpack_public_path__ + \"./fonts/OpenSansBold.ttf\";",
        "var api = require(\"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!./App.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};",
        "// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".snap-container {\\n    scroll-snap-type: x-mandatory;\\n}\\n\\n.snap-item-start {\\n    scroll-snap-align: start;\\n}\\n\\n.compose_editor_container {\\n    display: grid;\\n}\\n.compose_editor_container::after {\\n    content: attr(data-replicated-value) ' ';\\n    white-space: pre-wrap;\\n    visibility: hidden;\\n}\\n.compose_editor_container > textarea {\\n    resize: none;\\n    overflow: hidden;\\n}\\n.compose_editor_container > textarea,\\n.compose_editor_container::after {\\n    border: 1px solid black;\\n    padding: 0.5rem;\\n    font: inherit;\\n    grid-area: 1 / 1 / 2 / 2;\\n}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n",
        "/* eslint-disable no-console */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n",
        "import React, { Suspense, lazy } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nconst Routes = () => {\n    return (\n        <BrowserRouter>\n            <Suspense fallback=\"Loading...\">\n                <Switch>\n                    <Route exact path=\"/\" component={lazy(() => import(`../pages/LandingPage`))} />\n                </Switch>\n            </Suspense>\n        </BrowserRouter>\n    );\n};\n\nexport default Routes;\n",
        "import './normalized.css';\nimport './App.css'\nimport React from 'react';\nimport Routes from './routes';\n\nconst App = () => <Routes />\nexport default App;\n",
        "import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport { AppRegistry } from 'react-native';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nAppRegistry.registerComponent('App', () => App);\n\nAppRegistry.runApplication('App', {\n    rootTag: document.getElementById('root'),\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"
    ],
    "sourceRoot": ""
}
